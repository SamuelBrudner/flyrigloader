[build-system]
requires = ["setuptools>=42", "wheel", "semantic_version>=2.10.0"]
build-backend = "setuptools.build_meta"

[project]
name = "flyrigloader"
version = "1.0.0-rc1"
description = "Tools for managing and controlling fly rigs for neuroscience experiments"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
dependencies = [
    "loguru>=0.7.0",
    "pydantic>=2.6",
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "semantic_version>=2.10.0",
]

[project.optional-dependencies]
dev = [
    # Testing Infrastructure
    "pytest>=7.0.0",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14.1", 
    "pytest-benchmark>=4.0.0",
    "coverage>=7.8.2",
    "hypothesis>=6.131.9",
    "pytest-xdist>=3.7.0",
    "pytest-timeout>=2.3.0",
    
    # Code Quality & Pre-commit Infrastructure
    "black>=24.3.0",
    "isort>=5.12.0",
    "mypy>=1.8.0",
    "flake8>=7.0.0",
    "pre-commit>=3.6.0",
]
kedro = [
    "kedro>=0.18.0",
]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--durations=10"
]

# Define custom markers
markers = [
    "api: mark tests that test the API",
    "performance: mark tests that measure performance",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as performance benchmarks",
    "property_based: marks tests that use property-based testing",
    "config: marks tests related to configuration functionality",
    "builders: marks tests related to builder pattern functionality"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

[tool.coverage.run]
source = ["src/flyrigloader"]
branch = true
parallel = true
context = "${COVERAGE_CONTEXT}"
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*"
]

[tool.coverage.report]
show_missing = true
fail_under = 90
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"
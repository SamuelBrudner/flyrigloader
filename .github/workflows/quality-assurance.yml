name: Quality Assurance Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  # Allow manual triggering for debugging and validation
  workflow_dispatch:

# Ensure only one quality assurance workflow runs at a time per branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Static Type Checking with mypy in strict mode
  type-checking:
    name: Type Safety Validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Fetch full history for accurate blame and coverage analysis
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e .[dev]
        # Install additional mypy dependencies for comprehensive type checking
        pip install types-PyYAML types-setuptools
    
    - name: Run mypy type checking (strict mode)
      run: |
        echo "Running mypy static type analysis with strict mode enforcement..."
        mypy src/flyrigloader \
          --strict \
          --show-error-codes \
          --show-error-context \
          --show-column-numbers \
          --pretty \
          --error-summary \
          --warn-unreachable \
          --warn-redundant-casts \
          --warn-unused-ignores \
          --disallow-any-generics \
          --disallow-any-unimported \
          --disallow-any-decorated \
          --disallow-any-explicit \
          --disallow-subclassing-any \
          --disallow-untyped-calls \
          --disallow-untyped-defs \
          --disallow-incomplete-defs \
          --check-untyped-defs \
          --disallow-untyped-decorators \
          --no-implicit-optional \
          --warn-return-any \
          --warn-no-return \
          --strict-equality \
          --extra-checks \
          --ignore-missing-imports
    
    - name: Validate test type annotations
      run: |
        echo "Validating type annotations in test modules..."
        mypy tests \
          --ignore-missing-imports \
          --show-error-codes \
          --warn-unused-ignores \
          --disallow-untyped-defs \
          --disallow-incomplete-defs \
          --check-untyped-defs
    
    - name: Generate type coverage report
      run: |
        echo "Generating comprehensive type coverage analysis..."
        mypy src/flyrigloader \
          --strict \
          --html-report mypy-report \
          --txt-report mypy-summary \
          --ignore-missing-imports
    
    - name: Upload type checking reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: type-checking-report-py${{ matrix.python-version }}
        path: |
          mypy-report/
          mypy-summary/
        retention-days: 30

  # Code Formatting and Import Organization Validation
  code-formatting:
    name: Code Formatting Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install formatting tools
      run: |
        python -m pip install --upgrade pip
        pip install black>=24.3.0 isort>=5.12.0
    
    - name: Check black code formatting
      run: |
        echo "Validating black code formatting compliance..."
        black --check --diff --color --verbose src/ tests/
        if [ $? -ne 0 ]; then
          echo "❌ Black formatting violations detected!"
          echo "Run 'black src/ tests/' locally to fix formatting issues"
          exit 1
        fi
        echo "✅ Black formatting validation passed"
    
    - name: Check isort import organization
      run: |
        echo "Validating isort import organization with black profile..."
        isort --check-only --diff --color --verbose \
          --profile black \
          --multi-line 3 \
          --trailing-comma \
          --force-grid-wrap 0 \
          --combine-as \
          --line-length 88 \
          src/ tests/
        if [ $? -ne 0 ]; then
          echo "❌ Import organization violations detected!"
          echo "Run 'isort --profile black src/ tests/' locally to fix import order"
          exit 1
        fi
        echo "✅ Import organization validation passed"
    
    - name: Generate formatting diff report
      if: failure()
      run: |
        echo "Generating comprehensive formatting violation report..."
        mkdir -p formatting-report
        
        echo "## Black Formatting Violations" > formatting-report/violations.md
        echo '```diff' >> formatting-report/violations.md
        black --check --diff src/ tests/ >> formatting-report/violations.md || true
        echo '```' >> formatting-report/violations.md
        
        echo "## Import Organization Violations" >> formatting-report/violations.md
        echo '```diff' >> formatting-report/violations.md
        isort --check-only --diff --profile black src/ tests/ >> formatting-report/violations.md || true
        echo '```' >> formatting-report/violations.md
    
    - name: Upload formatting violation report
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: formatting-violations-report
        path: formatting-report/
        retention-days: 30

  # Comprehensive Linting with flake8 and plugins
  linting:
    name: Comprehensive Code Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install linting tools and plugins
      run: |
        python -m pip install --upgrade pip
        pip install \
          flake8>=7.0.0 \
          flake8-docstrings>=1.7.0 \
          flake8-bugbear>=23.0.0 \
          flake8-comprehensions>=3.14.0 \
          flake8-simplify>=0.20.0 \
          flake8-type-checking>=2.7.0 \
          flake8-pytest-style>=2.1.0 \
          pep8-naming>=0.13.0
    
    - name: Create flake8 configuration
      run: |
        cat > .flake8 << EOF
        [flake8]
        max-line-length = 88
        extend-ignore = 
            # Black compatibility
            E203, W503, W504,
            # Docstring formatting handled by black
            D100, D101, D102, D103, D104, D105, D106, D107,
            # Allow long lines in tests for readability
            E501
        per-file-ignores =
            # Tests can have additional flexibility
            tests/*:D100,D101,D102,D103,D104,D105,D106,D107,F401,F811
            # __init__.py files can import without usage
            __init__.py:F401
        exclude =
            .git,
            __pycache__,
            .pytest_cache,
            htmlcov,
            build,
            dist,
            *.egg-info
        select = 
            # Standard flake8 rules
            E, W, F,
            # flake8-bugbear
            B,
            # flake8-comprehensions  
            C4,
            # flake8-simplify
            SIM,
            # pep8-naming
            N,
            # flake8-pytest-style (comprehensive pytest validation)
            PT001, PT002, PT003, PT004, PT005, PT006, PT007, PT008, PT009, PT010, PT011, PT012, PT013, PT014, PT015, PT016, PT017, PT018, PT019, PT020, PT021, PT022, PT023,
            # flake8-docstrings (selective)
            D200, D201, D202, D204, D205, D208, D209, D210, D211, D212, D213, D214, D215, D300, D301, D400, D401, D402, D403, D404, D405, D406, D407, D408, D409, D410, D411, D412, D413, D414, D415, D416, D417, D418, D419
        docstring-convention = google
        
        # flake8-pytest-style configuration for comprehensive test validation
        pytest-fixture-no-parentheses = true
        pytest-mark-no-parentheses = true
        pytest-parametrize-names-type = tuple
        pytest-parametrize-values-type = tuple
        pytest-parametrize-values-row-type = tuple
        pytest-raises-require-match-for = BaseException
        EOF
    
    - name: Run comprehensive linting analysis
      run: |
        echo "Running comprehensive flake8 linting with multiple plugins..."
        flake8 src/ tests/ \
          --statistics \
          --count \
          --show-source \
          --benchmark \
          --tee \
          --output-file=flake8-report.txt
        
        echo "✅ Linting analysis completed successfully"
    
    - name: Generate linting quality metrics
      run: |
        echo "Generating comprehensive linting quality metrics..."
        mkdir -p linting-report
        
        # Generate detailed violation report by category
        echo "# Flake8 Linting Report" > linting-report/summary.md
        echo "Generated: $(date)" >> linting-report/summary.md
        echo "" >> linting-report/summary.md
        
        # Count violations by category including pytest-style
        echo "## Violation Summary by Category" >> linting-report/summary.md
        echo "| Category | Count | Description |" >> linting-report/summary.md
        echo "|----------|-------|-------------|" >> linting-report/summary.md
        
        for category in E W F B C4 SIM N D PT; do
          count=$(grep -c "^[^:]*:[^:]*: $category" flake8-report.txt || echo "0")
          case $category in
            E) desc="PEP 8 Error" ;;
            W) desc="PEP 8 Warning" ;;
            F) desc="PyFlakes Error" ;;
            B) desc="Bugbear Violation" ;;
            C4) desc="Comprehension Issue" ;;
            SIM) desc="Simplification Opportunity" ;;
            N) desc="Naming Convention" ;;
            D) desc="Docstring Issue" ;;
            PT) desc="Pytest Style Violation" ;;
          esac
          echo "| $category | $count | $desc |" >> linting-report/summary.md
        done
        
        # Generate detailed pytest-style validation report
        echo "" >> linting-report/summary.md
        echo "## Pytest Style Validation Details" >> linting-report/summary.md
        echo "| Rule | Count | Description |" >> linting-report/summary.md
        echo "|------|-------|-------------|" >> linting-report/summary.md
        
        # PT001-PT007: Core pytest naming and structure
        pt001_count=$(grep -c "PT001" flake8-report.txt || echo "0")
        pt003_count=$(grep -c "PT003" flake8-report.txt || echo "0")
        pt004_count=$(grep -c "PT004" flake8-report.txt || echo "0")
        pt005_count=$(grep -c "PT005" flake8-report.txt || echo "0")
        pt006_count=$(grep -c "PT006" flake8-report.txt || echo "0")
        pt007_count=$(grep -c "PT007" flake8-report.txt || echo "0")
        pt024_count=$(grep -c "PT024" flake8-report.txt || echo "0")
        pt025_count=$(grep -c "PT025" flake8-report.txt || echo "0")
        
        echo "| PT001 | $pt001_count | Test function naming violations |" >> linting-report/summary.md
        echo "| PT003 | $pt003_count | Test fixture naming violations |" >> linting-report/summary.md
        echo "| PT004 | $pt004_count | Fixture scope violations |" >> linting-report/summary.md
        echo "| PT005 | $pt005_count | Fixture return value violations |" >> linting-report/summary.md
        echo "| PT006 | $pt006_count | Parametrize argument naming violations |" >> linting-report/summary.md
        echo "| PT007 | $pt007_count | Parametrize value type violations |" >> linting-report/summary.md
        echo "| PT024 | $pt024_count | AAA pattern violations (warnings) |" >> linting-report/summary.md
        echo "| PT025 | $pt025_count | AAA assertion violations (warnings) |" >> linting-report/summary.md
        
        # Calculate overall pytest style compliance
        total_pt_violations=$((pt001_count + pt003_count + pt004_count + pt005_count + pt006_count + pt007_count))
        echo "" >> linting-report/summary.md
        echo "## Pytest Style Compliance Summary" >> linting-report/summary.md
        echo "- **Blocking Violations (PT001-PT007)**: $total_pt_violations" >> linting-report/summary.md
        echo "- **Warning-Level AAA Pattern Issues (PT024-PT025)**: $((pt024_count + pt025_count))" >> linting-report/summary.md
        
        if [ $total_pt_violations -eq 0 ]; then
          echo "- **Status**: ✅ Full pytest style compliance achieved" >> linting-report/summary.md
        else
          echo "- **Status**: ❌ Pytest style violations detected - merge blocked" >> linting-report/summary.md
        fi
        
        echo "" >> linting-report/summary.md
        echo "## Full Report" >> linting-report/summary.md
        echo '```' >> linting-report/summary.md
        cat flake8-report.txt >> linting-report/summary.md || echo "No violations found" >> linting-report/summary.md
        echo '```' >> linting-report/summary.md
    
    - name: Upload linting reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: linting-quality-report
        path: |
          linting-report/
          flake8-report.txt
        retention-days: 30

  # Pre-commit Hook Validation
  pre-commit-validation:
    name: Pre-commit Hook Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install development dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Create comprehensive pre-commit configuration
      run: |
        cat > .pre-commit-config.yaml << EOF
        repos:
          - repo: https://github.com/psf/black
            rev: 24.3.0
            hooks:
              - id: black
                language_version: python3
                args: [--line-length=88]
        
          - repo: https://github.com/pycqa/isort
            rev: 5.12.0
            hooks:
              - id: isort
                args: [--profile, black, --line-length=88]
        
          - repo: https://github.com/pycqa/flake8
            rev: 7.0.0
            hooks:
              - id: flake8
                additional_dependencies: 
                  - flake8-docstrings>=1.7.0
                  - flake8-bugbear>=23.0.0
                  - flake8-comprehensions>=3.14.0
                  - flake8-simplify>=0.20.0
                  - flake8-pytest-style>=2.1.0
                  - pep8-naming>=0.13.0
                args:
                  - --pytest-fixture-no-parentheses
                  - --pytest-mark-no-parentheses
                  - --pytest-parametrize-names-type=tuple
        
          - repo: https://github.com/pre-commit/mirrors-mypy
            rev: v1.8.0
            hooks:
              - id: mypy
                additional_dependencies: 
                  - types-PyYAML
                  - types-setuptools
                args: [--strict, --ignore-missing-imports]
                exclude: ^tests/
        
          - repo: https://github.com/pre-commit/pre-commit-hooks
            rev: v4.5.0
            hooks:
              - id: trailing-whitespace
              - id: end-of-file-fixer
              - id: check-yaml
              - id: check-toml
              - id: check-json
              - id: check-merge-conflict
              - id: check-added-large-files
                args: [--maxkb=1000]
              - id: debug-statements
        
          - repo: local
            hooks:
              - id: pytest-style-validation
                name: Pytest Style and AAA Pattern Enforcement
                entry: python -m flake8 --select=PT
                language: system
                files: ^tests/.*\.py$
                description: Enforce pytest naming conventions and AAA patterns
              
              - id: pytest-fixture-validation  
                name: Pytest Fixture Standards Check
                entry: python -m flake8 --select=PT004,PT005
                language: system
                files: ^tests/.*\.py$
                description: Validate fixture naming and usage patterns
              
              - id: pytest-naming-validation
                name: Pytest Naming Convention Check
                entry: python -m flake8 --select=PT001,PT003,PT006,PT007
                language: system
                files: ^tests/.*\.py$
                description: Validate pytest naming conventions and parametrize usage
              
              - id: pytest-coverage-check
                name: pytest coverage validation
                entry: pytest
                language: system
                args: 
                  - --cov=src/flyrigloader
                  - --cov-fail-under=90
                  - --cov-report=term-missing
                  - --maxfail=1
                  - --tb=short
                types: [python]
                pass_filenames: false
                always_run: false
        EOF
    
    - name: Install and run pre-commit hooks
      run: |
        echo "Installing pre-commit hooks..."
        pre-commit install
        
        echo "Running all pre-commit hooks on all files..."
        pre-commit run --all-files --verbose
    
    - name: Validate pre-commit hook consistency
      run: |
        echo "Validating pre-commit hook consistency with CI configuration..."
        
        # Check that pre-commit black matches CI black
        pre-commit run black --all-files --verbose
        
        # Check that pre-commit isort matches CI isort  
        pre-commit run isort --all-files --verbose
        
        # Check that pre-commit flake8 matches CI flake8
        pre-commit run flake8 --all-files --verbose
        
        echo "✅ Pre-commit hook validation completed successfully"
    
    - name: Generate pre-commit validation report
      if: always()
      run: |
        echo "Generating pre-commit validation report..."
        mkdir -p precommit-report
        
        echo "# Pre-commit Hook Validation Report" > precommit-report/validation.md
        echo "Generated: $(date)" >> precommit-report/validation.md
        echo "" >> precommit-report/validation.md
        
        echo "## Hook Configuration" >> precommit-report/validation.md
        echo '```yaml' >> precommit-report/validation.md
        cat .pre-commit-config.yaml >> precommit-report/validation.md
        echo '```' >> precommit-report/validation.md
        
        echo "## Validation Results" >> precommit-report/validation.md
        echo "All pre-commit hooks executed successfully and match CI configuration." >> precommit-report/validation.md
    
    - name: Upload pre-commit validation report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: precommit-validation-report
        path: precommit-report/
        retention-days: 30

  # Test Traceability Validation for PR descriptions
  test-traceability-validation:
    name: Test Traceability Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Detect test file changes
      id: test-changes
      run: |
        echo "Detecting test file modifications in this PR..."
        
        # Get list of modified test files
        git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
        
        # Filter for test files
        grep "^tests/.*\.py$" changed_files.txt > test_changes.txt || echo "No test file changes detected"
        
        # Count test file changes
        test_change_count=$(wc -l < test_changes.txt)
        echo "test_changes=$test_change_count" >> $GITHUB_OUTPUT
        
        echo "Test files modified: $test_change_count"
        if [ $test_change_count -gt 0 ]; then
          echo "Modified test files:"
          cat test_changes.txt
        fi
    
    - name: Validate PR description for test traceability
      if: steps.test-changes.outputs.test_changes != '0'
      run: |
        echo "Validating PR description for comprehensive test modification documentation..."
        
        # Get PR description
        PR_BODY="${{ github.event.pull_request.body }}"
        
        # Check if PR description exists and has sufficient content
        if [ -z "$PR_BODY" ] || [ ${#PR_BODY} -lt 100 ]; then
          echo "❌ ERROR: PR description is missing or too short for test modifications"
          echo "When modifying test files, PR description must include:"
          echo "- Detailed justification for each removed or rewritten test"
          echo "- Mapping of old test names to new implementations"
          echo "- Confirmation that test coverage is maintained"
          echo "- Reference to docs/testing_guidelines.md compliance"
          exit 1
        fi
        
        # Check for required traceability keywords
        required_keywords=("test" "coverage" "removed" "rewritten" "justification")
        missing_keywords=()
        
        for keyword in "${required_keywords[@]}"; do
          if ! echo "$PR_BODY" | grep -qi "$keyword"; then
            missing_keywords+=("$keyword")
          fi
        done
        
        if [ ${#missing_keywords[@]} -gt 0 ]; then
          echo "❌ ERROR: PR description missing required traceability keywords"
          echo "Missing keywords: ${missing_keywords[*]}"
          echo ""
          echo "Required documentation for test modifications:"
          echo "1. Document every removed or rewritten test with clear justification"
          echo "2. Provide explicit mapping of old test names to replacement implementations"
          echo "3. Confirm that test coverage is maintained or improved"
          echo "4. Reference compliance with docs/testing_guidelines.md standards"
          echo "5. Include testing strategy alignment explanation"
          exit 1
        fi
        
        # Check for specific test traceability patterns
        if ! echo "$PR_BODY" | grep -qi "docs/testing_guidelines.md"; then
          echo "❌ ERROR: PR description must reference docs/testing_guidelines.md compliance"
          exit 1
        fi
        
        echo "✅ PR description meets test traceability requirements"
        echo "All required documentation patterns found for test modifications"
    
    - name: Generate test traceability report
      if: always()
      run: |
        echo "Generating comprehensive test traceability validation report..."
        mkdir -p test-traceability-report
        
        echo "# Test Traceability Validation Report" > test-traceability-report/validation.md
        echo "Generated: $(date)" >> test-traceability-report/validation.md
        echo "PR: #${{ github.event.pull_request.number }}" >> test-traceability-report/validation.md
        echo "" >> test-traceability-report/validation.md
        
        echo "## Test File Modifications" >> test-traceability-report/validation.md
        if [ -f test_changes.txt ] && [ -s test_changes.txt ]; then
          echo "Modified test files in this PR:" >> test-traceability-report/validation.md
          echo '```' >> test-traceability-report/validation.md
          cat test_changes.txt >> test-traceability-report/validation.md
          echo '```' >> test-traceability-report/validation.md
        else
          echo "No test files modified in this PR." >> test-traceability-report/validation.md
        fi
        
        echo "" >> test-traceability-report/validation.md
        echo "## Traceability Validation Result" >> test-traceability-report/validation.md
        if [ "${{ steps.test-changes.outputs.test_changes }}" != "0" ]; then
          echo "✅ Test modifications detected and traceability validation performed" >> test-traceability-report/validation.md
          echo "PR description reviewed for comprehensive test change documentation" >> test-traceability-report/validation.md
        else
          echo "ℹ️ No test modifications detected - traceability validation skipped" >> test-traceability-report/validation.md
        fi
        
        echo "" >> test-traceability-report/validation.md
        echo "## Required Documentation Standards" >> test-traceability-report/validation.md
        echo "- Every removed test must be documented with justification" >> test-traceability-report/validation.md
        echo "- Rewritten tests must include mapping to original implementation" >> test-traceability-report/validation.md
        echo "- Coverage impact must be analyzed and documented" >> test-traceability-report/validation.md
        echo "- Compliance with docs/testing_guidelines.md must be confirmed" >> test-traceability-report/validation.md
    
    - name: Upload test traceability validation report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-traceability-validation-report
        path: test-traceability-report/
        retention-days: 90

  # Quality Metrics Dashboard and Reporting
  quality-metrics:
    name: Quality Metrics Dashboard
    runs-on: ubuntu-latest
    needs: [type-checking, code-formatting, linting, pre-commit-validation, test-traceability-validation]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Download all quality reports
      uses: actions/download-artifact@v4
      with:
        path: quality-reports/
    
    - name: Generate comprehensive quality dashboard
      run: |
        echo "Generating comprehensive quality metrics dashboard..."
        mkdir -p quality-dashboard
        
        # Create comprehensive quality dashboard
        cat > quality-dashboard/index.md << EOF
        # Quality Assurance Dashboard
        
        **Generated:** $(date)  
        **Commit:** ${{ github.sha }}  
        **Branch:** ${{ github.ref_name }}  
        **Workflow:** ${{ github.run_number }}
        
        ## Quality Gates Status
        
        | Quality Gate | Status | Details |
        |-------------|--------|---------|
        | Type Checking | ${{ needs.type-checking.result == 'success' && '✅ PASS' || '❌ FAIL' }} | mypy strict mode validation |
        | Code Formatting | ${{ needs.code-formatting.result == 'success' && '✅ PASS' || '❌ FAIL' }} | black + isort compliance |
        | Comprehensive Linting | ${{ needs.linting.result == 'success' && '✅ PASS' || '❌ FAIL' }} | flake8 + pytest-style validation |
        | Pre-commit Validation | ${{ needs.pre-commit-validation.result == 'success' && '✅ PASS' || '❌ FAIL' }} | Hook consistency + pytest-style check |
        | Test Traceability | ${{ needs.test-traceability-validation.result == 'success' && '✅ PASS' || (github.event_name == 'pull_request' && '❌ FAIL') || 'ℹ️ SKIP' }} | PR test modification documentation |
        
        ## Quality Metrics Summary
        
        ### Type Safety Coverage
        - **Target:** 100% type annotation coverage
        - **Enforcement:** mypy strict mode with comprehensive rules
        - **Python Versions:** 3.8, 3.9, 3.10, 3.11
        
        ### Code Style Compliance
        - **Formatter:** black (line length: 88)
        - **Import Organization:** isort with black profile
        - **Enforcement:** Zero tolerance for formatting violations
        
        ### Linting Quality
        - **Primary Linter:** flake8 with comprehensive plugin suite
        - **Plugins:** bugbear, docstrings, comprehensions, simplify, naming, pytest-style
        - **Pytest Style Validation:** Comprehensive AAA patterns, naming conventions, fixture standards
        - **Docstring Convention:** Google style
        
        ### Pytest Style Quality Validation
        - **Test Naming Compliance:** 100% adherence to standardized naming patterns
        - **AAA Pattern Enforcement:** ≥95% adoption rate with warning-level guidance
        - **Fixture Standards:** 100% compliance with centralized fixture management
        - **Parametrize Consistency:** Comprehensive validation of argument naming and types
        - **Test Traceability:** Mandatory PR documentation for test modifications
        
        ### Development Workflow Integration
        - **Pre-commit Hooks:** Fully configured with pytest-style validation
        - **CI/CD Consistency:** Local development matches CI enforcement
        - **Quality Gates:** Automated blocking on quality violations
        
        ## Detailed Reports
        
        All detailed quality reports are available as workflow artifacts:
        
        - **Type Checking Reports:** mypy analysis with HTML and text output
        - **Formatting Violations:** Detailed diff reports for black/isort issues
        - **Linting Quality Report:** Comprehensive violation analysis by category
        - **Pre-commit Validation:** Hook configuration and execution results
        
        ## Quality Assurance Framework Compliance
        
        This quality assurance pipeline implements comprehensive validation per Section 3.6.4:
        
        - ✅ **Type Safety Validation:** Complete type annotation coverage with mypy integration
        - ✅ **Automated Quality Gates:** Stringent code style and linting standards enforcement
        - ✅ **Pytest Style Validation:** Comprehensive test quality with AAA patterns and naming conventions
        - ✅ **Test Traceability:** Mandatory documentation of test modifications for research reproducibility
        - ✅ **Pre-commit Integration:** Consistent quality validation across development and CI
        - ✅ **Quality Metrics Dashboard:** Detailed reporting and trend analysis capabilities
        
        ## Recommendations
        
        For optimal development experience:
        
        1. **Install pre-commit hooks locally:** \`pre-commit install\`
        2. **Run quality checks before commit:** \`pre-commit run --all-files\`
        3. **Use automated formatting:** \`black src/ tests/ && isort --profile black src/ tests/\`
        4. **Validate types regularly:** \`mypy src/flyrigloader --strict\`
        
        EOF
    
    - name: Upload comprehensive quality dashboard
      uses: actions/upload-artifact@v4
      with:
        name: quality-assurance-dashboard
        path: quality-dashboard/
        retention-days: 90
    
    - name: Generate quality gate summary for PR
      if: github.event_name == 'pull_request'
      run: |
        echo "## Quality Assurance Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Quality Gate | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Type Checking | ${{ needs.type-checking.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Formatting | ${{ needs.code-formatting.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Comprehensive Linting | ${{ needs.linting.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Pre-commit Validation | ${{ needs.pre-commit-validation.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test Traceability | ${{ needs.test-traceability-validation.result == 'success' && '✅ PASS' || (github.event_name == 'pull_request' && '❌ FAIL') || 'ℹ️ SKIP' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Pytest Style Quality Metrics" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Naming Compliance:** Enforced via flake8-pytest-style PT001-PT003" >> $GITHUB_STEP_SUMMARY
        echo "- **AAA Pattern Validation:** Warning-level enforcement for gradual adoption" >> $GITHUB_STEP_SUMMARY
        echo "- **Fixture Standards:** Blocking enforcement for centralized fixture management" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Traceability:** Required documentation for all test modifications" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Detailed reports available in workflow artifacts**" >> $GITHUB_STEP_SUMMARY
    
    - name: Enforce quality gate requirements
      run: |
        echo "Enforcing comprehensive quality gate requirements..."
        
        # Check that all quality gates passed
        if [[ "${{ needs.type-checking.result }}" != "success" ]]; then
          echo "❌ Type checking failed - blocking merge"
          exit 1
        fi
        
        if [[ "${{ needs.code-formatting.result }}" != "success" ]]; then
          echo "❌ Code formatting failed - blocking merge"
          exit 1
        fi
        
        if [[ "${{ needs.linting.result }}" != "success" ]]; then
          echo "❌ Linting failed - blocking merge"
          exit 1
        fi
        
        if [[ "${{ needs.pre-commit-validation.result }}" != "success" ]]; then
          echo "❌ Pre-commit validation failed - blocking merge"
          exit 1
        fi
        
        # Check test traceability validation for PRs only
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          if [[ "${{ needs.test-traceability-validation.result }}" != "success" ]]; then
            echo "❌ Test traceability validation failed - blocking merge"
            echo "PR description must document all test modifications with comprehensive justification"
            exit 1
          fi
        fi
        
        echo "✅ All quality gates passed successfully!"
        echo "🚀 Code meets comprehensive quality assurance standards per Section 3.6.4"
        echo "✅ Pytest style validation ensures test quality and maintainability"
        echo "✅ Test traceability validation supports research reproducibility requirements"
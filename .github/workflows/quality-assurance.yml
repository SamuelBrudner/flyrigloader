name: Quality Assurance Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  # Allow manual triggering for debugging and validation
  workflow_dispatch:

# Ensure only one quality assurance workflow runs at a time per branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Static Type Checking with mypy in strict mode
  type-checking:
    name: Type Safety Validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Fetch full history for accurate blame and coverage analysis
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e .[dev]
        # Install additional mypy dependencies for comprehensive type checking
        pip install types-PyYAML types-setuptools
    
    - name: Run mypy type checking (strict mode)
      run: |
        echo "Running mypy static type analysis with strict mode enforcement..."
        mypy src/flyrigloader \
          --strict \
          --show-error-codes \
          --show-error-context \
          --show-column-numbers \
          --pretty \
          --error-summary \
          --warn-unreachable \
          --warn-redundant-casts \
          --warn-unused-ignores \
          --disallow-any-generics \
          --disallow-any-unimported \
          --disallow-any-decorated \
          --disallow-any-explicit \
          --disallow-subclassing-any \
          --disallow-untyped-calls \
          --disallow-untyped-defs \
          --disallow-incomplete-defs \
          --check-untyped-defs \
          --disallow-untyped-decorators \
          --no-implicit-optional \
          --warn-return-any \
          --warn-no-return \
          --strict-equality \
          --extra-checks \
          --ignore-missing-imports
    
    - name: Validate test type annotations
      run: |
        echo "Validating type annotations in test modules..."
        mypy tests \
          --ignore-missing-imports \
          --show-error-codes \
          --warn-unused-ignores \
          --disallow-untyped-defs \
          --disallow-incomplete-defs \
          --check-untyped-defs
    
    - name: Generate type coverage report
      run: |
        echo "Generating comprehensive type coverage analysis..."
        mypy src/flyrigloader \
          --strict \
          --html-report mypy-report \
          --txt-report mypy-summary \
          --ignore-missing-imports
    
    - name: Upload type checking reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: type-checking-report-py${{ matrix.python-version }}
        path: |
          mypy-report/
          mypy-summary/
        retention-days: 30

  # Code Formatting and Import Organization Validation
  code-formatting:
    name: Code Formatting Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install formatting tools
      run: |
        python -m pip install --upgrade pip
        pip install black>=24.3.0 isort>=5.12.0
    
    - name: Check black code formatting
      run: |
        echo "Validating black code formatting compliance..."
        black --check --diff --color --verbose src/ tests/
        if [ $? -ne 0 ]; then
          echo "❌ Black formatting violations detected!"
          echo "Run 'black src/ tests/' locally to fix formatting issues"
          exit 1
        fi
        echo "✅ Black formatting validation passed"
    
    - name: Check isort import organization
      run: |
        echo "Validating isort import organization with black profile..."
        isort --check-only --diff --color --verbose \
          --profile black \
          --multi-line 3 \
          --trailing-comma \
          --force-grid-wrap 0 \
          --combine-as \
          --line-length 88 \
          src/ tests/
        if [ $? -ne 0 ]; then
          echo "❌ Import organization violations detected!"
          echo "Run 'isort --profile black src/ tests/' locally to fix import order"
          exit 1
        fi
        echo "✅ Import organization validation passed"
    
    - name: Generate formatting diff report
      if: failure()
      run: |
        echo "Generating comprehensive formatting violation report..."
        mkdir -p formatting-report
        
        echo "## Black Formatting Violations" > formatting-report/violations.md
        echo '```diff' >> formatting-report/violations.md
        black --check --diff src/ tests/ >> formatting-report/violations.md || true
        echo '```' >> formatting-report/violations.md
        
        echo "## Import Organization Violations" >> formatting-report/violations.md
        echo '```diff' >> formatting-report/violations.md
        isort --check-only --diff --profile black src/ tests/ >> formatting-report/violations.md || true
        echo '```' >> formatting-report/violations.md
    
    - name: Upload formatting violation report
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: formatting-violations-report
        path: formatting-report/
        retention-days: 30

  # Comprehensive Linting with flake8 and plugins
  linting:
    name: Comprehensive Code Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install linting tools and plugins
      run: |
        python -m pip install --upgrade pip
        pip install \
          flake8>=7.0.0 \
          flake8-docstrings>=1.7.0 \
          flake8-bugbear>=23.0.0 \
          flake8-comprehensions>=3.14.0 \
          flake8-simplify>=0.20.0 \
          flake8-type-checking>=2.7.0 \
          pep8-naming>=0.13.0
    
    - name: Create flake8 configuration
      run: |
        cat > .flake8 << EOF
        [flake8]
        max-line-length = 88
        extend-ignore = 
            # Black compatibility
            E203, W503, W504,
            # Docstring formatting handled by black
            D100, D101, D102, D103, D104, D105, D106, D107,
            # Allow long lines in tests for readability
            E501
        per-file-ignores =
            # Tests can have additional flexibility
            tests/*:D100,D101,D102,D103,D104,D105,D106,D107,F401,F811
            # __init__.py files can import without usage
            __init__.py:F401
        exclude =
            .git,
            __pycache__,
            .pytest_cache,
            htmlcov,
            build,
            dist,
            *.egg-info
        select = 
            # Standard flake8 rules
            E, W, F,
            # flake8-bugbear
            B,
            # flake8-comprehensions  
            C4,
            # flake8-simplify
            SIM,
            # pep8-naming
            N,
            # flake8-docstrings (selective)
            D200, D201, D202, D204, D205, D208, D209, D210, D211, D212, D213, D214, D215, D300, D301, D400, D401, D402, D403, D404, D405, D406, D407, D408, D409, D410, D411, D412, D413, D414, D415, D416, D417, D418, D419
        docstring-convention = google
        EOF
    
    - name: Run comprehensive linting analysis
      run: |
        echo "Running comprehensive flake8 linting with multiple plugins..."
        flake8 src/ tests/ \
          --statistics \
          --count \
          --show-source \
          --benchmark \
          --tee \
          --output-file=flake8-report.txt
        
        echo "✅ Linting analysis completed successfully"
    
    - name: Generate linting quality metrics
      run: |
        echo "Generating comprehensive linting quality metrics..."
        mkdir -p linting-report
        
        # Generate detailed violation report by category
        echo "# Flake8 Linting Report" > linting-report/summary.md
        echo "Generated: $(date)" >> linting-report/summary.md
        echo "" >> linting-report/summary.md
        
        # Count violations by category
        echo "## Violation Summary by Category" >> linting-report/summary.md
        echo "| Category | Count | Description |" >> linting-report/summary.md
        echo "|----------|-------|-------------|" >> linting-report/summary.md
        
        for category in E W F B C4 SIM N D; do
          count=$(grep -c "^[^:]*:[^:]*: $category" flake8-report.txt || echo "0")
          case $category in
            E) desc="PEP 8 Error" ;;
            W) desc="PEP 8 Warning" ;;
            F) desc="PyFlakes Error" ;;
            B) desc="Bugbear Violation" ;;
            C4) desc="Comprehension Issue" ;;
            SIM) desc="Simplification Opportunity" ;;
            N) desc="Naming Convention" ;;
            D) desc="Docstring Issue" ;;
          esac
          echo "| $category | $count | $desc |" >> linting-report/summary.md
        done
        
        echo "" >> linting-report/summary.md
        echo "## Full Report" >> linting-report/summary.md
        echo '```' >> linting-report/summary.md
        cat flake8-report.txt >> linting-report/summary.md || echo "No violations found" >> linting-report/summary.md
        echo '```' >> linting-report/summary.md
    
    - name: Upload linting reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: linting-quality-report
        path: |
          linting-report/
          flake8-report.txt
        retention-days: 30

  # Pre-commit Hook Validation
  pre-commit-validation:
    name: Pre-commit Hook Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install development dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Create comprehensive pre-commit configuration
      run: |
        cat > .pre-commit-config.yaml << EOF
        repos:
          - repo: https://github.com/psf/black
            rev: 24.3.0
            hooks:
              - id: black
                language_version: python3
                args: [--line-length=88]
        
          - repo: https://github.com/pycqa/isort
            rev: 5.12.0
            hooks:
              - id: isort
                args: [--profile, black, --line-length=88]
        
          - repo: https://github.com/pycqa/flake8
            rev: 7.0.0
            hooks:
              - id: flake8
                additional_dependencies: 
                  - flake8-docstrings>=1.7.0
                  - flake8-bugbear>=23.0.0
                  - flake8-comprehensions>=3.14.0
                  - flake8-simplify>=0.20.0
                  - pep8-naming>=0.13.0
        
          - repo: https://github.com/pre-commit/mirrors-mypy
            rev: v1.8.0
            hooks:
              - id: mypy
                additional_dependencies: 
                  - types-PyYAML
                  - types-setuptools
                args: [--strict, --ignore-missing-imports]
                exclude: ^tests/
        
          - repo: https://github.com/pre-commit/pre-commit-hooks
            rev: v4.5.0
            hooks:
              - id: trailing-whitespace
              - id: end-of-file-fixer
              - id: check-yaml
              - id: check-toml
              - id: check-json
              - id: check-merge-conflict
              - id: check-added-large-files
                args: [--maxkb=1000]
              - id: debug-statements
        
          - repo: local
            hooks:
              - id: pytest-coverage-check
                name: pytest coverage validation
                entry: pytest
                language: system
                args: 
                  - --cov=src/flyrigloader
                  - --cov-fail-under=90
                  - --cov-report=term-missing
                  - --maxfail=1
                  - --tb=short
                types: [python]
                pass_filenames: false
                always_run: false
        EOF
    
    - name: Install and run pre-commit hooks
      run: |
        echo "Installing pre-commit hooks..."
        pre-commit install
        
        echo "Running all pre-commit hooks on all files..."
        pre-commit run --all-files --verbose
    
    - name: Validate pre-commit hook consistency
      run: |
        echo "Validating pre-commit hook consistency with CI configuration..."
        
        # Check that pre-commit black matches CI black
        pre-commit run black --all-files --verbose
        
        # Check that pre-commit isort matches CI isort  
        pre-commit run isort --all-files --verbose
        
        # Check that pre-commit flake8 matches CI flake8
        pre-commit run flake8 --all-files --verbose
        
        echo "✅ Pre-commit hook validation completed successfully"
    
    - name: Generate pre-commit validation report
      if: always()
      run: |
        echo "Generating pre-commit validation report..."
        mkdir -p precommit-report
        
        echo "# Pre-commit Hook Validation Report" > precommit-report/validation.md
        echo "Generated: $(date)" >> precommit-report/validation.md
        echo "" >> precommit-report/validation.md
        
        echo "## Hook Configuration" >> precommit-report/validation.md
        echo '```yaml' >> precommit-report/validation.md
        cat .pre-commit-config.yaml >> precommit-report/validation.md
        echo '```' >> precommit-report/validation.md
        
        echo "## Validation Results" >> precommit-report/validation.md
        echo "All pre-commit hooks executed successfully and match CI configuration." >> precommit-report/validation.md
    
    - name: Upload pre-commit validation report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: precommit-validation-report
        path: precommit-report/
        retention-days: 30

  # Quality Metrics Dashboard and Reporting
  quality-metrics:
    name: Quality Metrics Dashboard
    runs-on: ubuntu-latest
    needs: [type-checking, code-formatting, linting, pre-commit-validation]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Download all quality reports
      uses: actions/download-artifact@v4
      with:
        path: quality-reports/
    
    - name: Generate comprehensive quality dashboard
      run: |
        echo "Generating comprehensive quality metrics dashboard..."
        mkdir -p quality-dashboard
        
        # Create comprehensive quality dashboard
        cat > quality-dashboard/index.md << EOF
        # Quality Assurance Dashboard
        
        **Generated:** $(date)  
        **Commit:** ${{ github.sha }}  
        **Branch:** ${{ github.ref_name }}  
        **Workflow:** ${{ github.run_number }}
        
        ## Quality Gates Status
        
        | Quality Gate | Status | Details |
        |-------------|--------|---------|
        | Type Checking | ${{ needs.type-checking.result == 'success' && '✅ PASS' || '❌ FAIL' }} | mypy strict mode validation |
        | Code Formatting | ${{ needs.code-formatting.result == 'success' && '✅ PASS' || '❌ FAIL' }} | black + isort compliance |
        | Comprehensive Linting | ${{ needs.linting.result == 'success' && '✅ PASS' || '❌ FAIL' }} | flake8 + plugins analysis |
        | Pre-commit Validation | ${{ needs.pre-commit-validation.result == 'success' && '✅ PASS' || '❌ FAIL' }} | Hook consistency check |
        
        ## Quality Metrics Summary
        
        ### Type Safety Coverage
        - **Target:** 100% type annotation coverage
        - **Enforcement:** mypy strict mode with comprehensive rules
        - **Python Versions:** 3.8, 3.9, 3.10, 3.11
        
        ### Code Style Compliance
        - **Formatter:** black (line length: 88)
        - **Import Organization:** isort with black profile
        - **Enforcement:** Zero tolerance for formatting violations
        
        ### Linting Quality
        - **Primary Linter:** flake8 with comprehensive plugin suite
        - **Plugins:** bugbear, docstrings, comprehensions, simplify, naming
        - **Docstring Convention:** Google style
        
        ### Development Workflow Integration
        - **Pre-commit Hooks:** Fully configured and validated
        - **CI/CD Consistency:** Local development matches CI enforcement
        - **Quality Gates:** Automated blocking on quality violations
        
        ## Detailed Reports
        
        All detailed quality reports are available as workflow artifacts:
        
        - **Type Checking Reports:** mypy analysis with HTML and text output
        - **Formatting Violations:** Detailed diff reports for black/isort issues
        - **Linting Quality Report:** Comprehensive violation analysis by category
        - **Pre-commit Validation:** Hook configuration and execution results
        
        ## Quality Assurance Framework Compliance
        
        This quality assurance pipeline implements comprehensive validation per Section 3.6.4:
        
        - ✅ **Type Safety Validation:** Complete type annotation coverage with mypy integration
        - ✅ **Automated Quality Gates:** Stringent code style and linting standards enforcement
        - ✅ **Pre-commit Integration:** Consistent quality validation across development and CI
        - ✅ **Quality Metrics Dashboard:** Detailed reporting and trend analysis capabilities
        
        ## Recommendations
        
        For optimal development experience:
        
        1. **Install pre-commit hooks locally:** \`pre-commit install\`
        2. **Run quality checks before commit:** \`pre-commit run --all-files\`
        3. **Use automated formatting:** \`black src/ tests/ && isort --profile black src/ tests/\`
        4. **Validate types regularly:** \`mypy src/flyrigloader --strict\`
        
        EOF
    
    - name: Upload comprehensive quality dashboard
      uses: actions/upload-artifact@v4
      with:
        name: quality-assurance-dashboard
        path: quality-dashboard/
        retention-days: 90
    
    - name: Generate quality gate summary for PR
      if: github.event_name == 'pull_request'
      run: |
        echo "## Quality Assurance Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Quality Gate | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Type Checking | ${{ needs.type-checking.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Formatting | ${{ needs.code-formatting.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Comprehensive Linting | ${{ needs.linting.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Pre-commit Validation | ${{ needs.pre-commit-validation.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Detailed reports available in workflow artifacts**" >> $GITHUB_STEP_SUMMARY
    
    - name: Enforce quality gate requirements
      run: |
        echo "Enforcing comprehensive quality gate requirements..."
        
        # Check that all quality gates passed
        if [[ "${{ needs.type-checking.result }}" != "success" ]]; then
          echo "❌ Type checking failed - blocking merge"
          exit 1
        fi
        
        if [[ "${{ needs.code-formatting.result }}" != "success" ]]; then
          echo "❌ Code formatting failed - blocking merge"
          exit 1
        fi
        
        if [[ "${{ needs.linting.result }}" != "success" ]]; then
          echo "❌ Linting failed - blocking merge"
          exit 1
        fi
        
        if [[ "${{ needs.pre-commit-validation.result }}" != "success" ]]; then
          echo "❌ Pre-commit validation failed - blocking merge"
          exit 1
        fi
        
        echo "✅ All quality gates passed successfully!"
        echo "🚀 Code meets comprehensive quality assurance standards per Section 3.6.4"
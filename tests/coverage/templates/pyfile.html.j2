{# 
   FlyRigLoader Python File Coverage Template
   Individual file coverage visualization with comprehensive analysis
   Generated by: flyrigloader Coverage Enhancement System
   Template: pyfile.html.j2
   
   This template provides detailed line-by-line coverage analysis with:
   - Python syntax highlighting with coverage annotations
   - Branch coverage visualization and indicators  
   - Interactive source code navigation
   - Neuroscience experimental data context
   - Module-specific coverage metrics and quality indicators
   - Comprehensive error visualization for uncovered critical paths
   
   Requirements Fulfilled:
   - TST-COV-003: Generate coverage reports in XML, JSON, and HTML formats
   - Section 2.1.12: Coverage Enhancement System with detailed reporting
   - Section 3.6.4: Quality metrics dashboard integration
   - TST-COV-002: 100% coverage for critical data loading modules
#}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Coverage analysis for {{ cu.file_path | basename }} - FlyRigLoader Neuroscience Data Loading Library">
    <meta name="keywords" content="coverage,testing,neuroscience,experimental data,python,quality assurance">
    <meta name="author" content="FlyRigLoader Coverage Enhancement System">
    <meta name="generator" content="coverage.py {{ coverage_version }}">
    
    {# Open Graph meta tags for social sharing #}
    <meta property="og:title" content="Coverage Report: {{ cu.file_path | basename }}">
    <meta property="og:description" content="Detailed line-by-line coverage analysis for {{ cu.file_path | basename }} in FlyRigLoader neuroscience data loading library">
    <meta property="og:type" content="website">
    
    <title>Coverage Report: {{ cu.file_path | basename }} | FlyRigLoader</title>
    
    {# Preload critical resources for performance #}
    <link rel="preload" href="style.css" as="style">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    
    {# Include custom CSS template #}
    <link rel="stylesheet" href="style.css">
    
    {# Inline critical CSS for above-the-fold content #}
    <style>
        /* Critical path CSS for immediate rendering */
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background: var(--background-color);
        }
        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 4px solid var(--primary-color);
            border-top: 4px solid transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
    
    {# Accessibility skip link #}
    <a href="#main-content" class="skip-link">Skip to main content</a>
</head>

<body data-file-path="{{ cu.file_path }}" data-coverage="{{ "%.1f" | format(cu.pc_covered) }}%">
    {# Loading indicator #}
    <div id="loading" class="loading">
        <div class="loading-spinner"></div>
    </div>

    {# Header with navigation and metadata #}
    <header class="header" role="banner">
        <div class="container">
            <h1>
                <span class="logo" aria-hidden="true"></span>
                FlyRigLoader Coverage Report
                <span class="subtitle">{{ cu.file_path | basename }} - Neuroscience Data Loading Analysis</span>
            </h1>
        </div>
    </header>

    {# Navigation breadcrumb #}
    <nav class="breadcrumb" role="navigation" aria-label="Breadcrumb">
        <div class="container">
            <ol>
                <li><a href="index.html" title="Main coverage report">Coverage Home</a></li>
                {% set path_parts = cu.file_path.split('/') %}
                {% for i in range(path_parts|length - 1) %}
                    {% set partial_path = '/'.join(path_parts[:i+1]) %}
                    <li><a href="{% if i == 0 %}index.html{% else %}{{ partial_path | replace('/', '_') }}.html{% endif %}" 
                           title="Navigate to {{ path_parts[i] }}">{{ path_parts[i] }}</a></li>
                {% endfor %}
                <li aria-current="page">{{ cu.file_path | basename }}</li>
            </ol>
        </div>
    </nav>

    {# Main content area #}
    <main id="main-content" class="container" role="main">
        
        {# File overview and metrics #}
        <section class="content" aria-labelledby="file-overview">
            <div class="source-header">
                <h2 id="file-overview" class="source-title">
                    <code>{{ cu.file_path }}</code>
                </h2>
                <div class="source-stats">
                    <div class="source-stat" title="Overall coverage percentage">
                        <span class="stat-label">Coverage:</span>
                        <span class="stat-value {{ 'high' if cu.pc_covered >= 90 else 'medium' if cu.pc_covered >= 70 else 'low' }}">
                            {{ "%.1f" | format(cu.pc_covered) }}%
                        </span>
                    </div>
                    <div class="source-stat" title="Total executable statements">
                        <span class="stat-label">Statements:</span>
                        <span class="stat-value">{{ cu.n_statements }}</span>
                    </div>
                    <div class="source-stat" title="Missing coverage statements">
                        <span class="stat-label">Missing:</span>
                        <span class="stat-value {{ 'low' if cu.n_missing == 0 else 'medium' if cu.n_missing <= 5 else 'high' }}">
                            {{ cu.n_missing }}
                        </span>
                    </div>
                    {% if cu.n_branches %}
                    <div class="source-stat" title="Branch coverage percentage">
                        <span class="stat-label">Branches:</span>
                        <span class="stat-value {{ 'high' if cu.pc_covered_branches >= 90 else 'medium' if cu.pc_covered_branches >= 70 else 'low' }}">
                            {{ "%.1f" | format(cu.pc_covered_branches) }}%
                        </span>
                    </div>
                    {% endif %}
                </div>
            </div>

            {# Module categorization and context #}
            {% set module_category = None %}
            {% set is_critical = cu.file_path in ['src/flyrigloader/api.py'] or 
                                 'config/' in cu.file_path or 
                                 'discovery/' in cu.file_path or 
                                 'io/' in cu.file_path %}
            
            {% if 'api.py' in cu.file_path %}
                {% set module_category = 'core-api' %}
            {% elif 'config/' in cu.file_path %}
                {% set module_category = 'configuration' %}
            {% elif 'discovery/' in cu.file_path %}
                {% set module_category = 'discovery' %}
            {% elif 'io/' in cu.file_path %}
                {% set module_category = 'io' %}
            {% elif 'utils/' in cu.file_path %}
                {% set module_category = 'utils' %}
            {% endif %}

            {# Experimental data context section #}
            {% if is_critical %}
            <div class="experimental-context" role="region" aria-labelledby="experimental-context-heading">
                <h4 id="experimental-context-heading">üß† Neuroscience Research Context</h4>
                {% if 'api.py' in cu.file_path %}
                <p>This is a <strong>critical module</strong> providing the high-level API for neuroscience experimental data loading. 
                   <span class="domain-term" data-definition="Entry point for researchers to load experimental datasets">100% coverage is required</span> 
                   to ensure reliable data access for experimental analysis workflows.</p>
                {% elif 'config/' in cu.file_path %}
                <p>This is a <strong>critical configuration module</strong> managing YAML-based experimental setup definitions. 
                   <span class="domain-term" data-definition="Defines experiment parameters, file patterns, and data validation rules">Complete coverage</span> 
                   ensures consistent experiment configuration across research workflows.</p>
                {% elif 'discovery/' in cu.file_path %}
                <p>This is a <strong>critical discovery module</strong> for locating experimental data files using pattern matching. 
                   <span class="domain-term" data-definition="Automatically finds and categorizes experimental data files">Comprehensive testing</span> 
                   prevents data loss and ensures complete experimental dataset discovery.</p>
                {% elif 'io/' in cu.file_path %}
                <p>This is a <strong>critical I/O module</strong> handling experimental data loading and transformation. 
                   <span class="domain-term" data-definition="Loads pickle files, validates schemas, and transforms data for analysis">Complete coverage</span> 
                   is essential for data integrity in neuroscience experimental workflows.</p>
                {% endif %}
                
                {% if cu.pc_covered < 100 and is_critical %}
                <p class="performance-indicator sla-violation">
                    ‚ö†Ô∏è <strong>Critical Coverage Gap:</strong> This module requires 100% coverage for production neuroscience workflows.
                    Current coverage of {{ "%.1f" | format(cu.pc_covered) }}% may risk data loading reliability.
                </p>
                {% endif %}
            </div>
            {% endif %}

            {# Coverage quality assessment #}
            <div class="coverage-summary">
                <div class="summary-grid">
                    <div class="summary-card {{ 'success' if cu.pc_covered >= 90 else 'warning' if cu.pc_covered >= 70 else 'critical' }}">
                        <h3>Line Coverage</h3>
                        <div class="metric {{ 'high' if cu.pc_covered >= 90 else 'medium' if cu.pc_covered >= 70 else 'low' }}">
                            {{ "%.1f" | format(cu.pc_covered) }}%
                        </div>
                        <div class="description">
                            {{ cu.n_statements - cu.n_missing }}/{{ cu.n_statements }} statements covered
                        </div>
                        <div class="coverage-bar">
                            <div class="coverage-bar-fill {{ 'high' if cu.pc_covered >= 90 else 'medium' if cu.pc_covered >= 70 else 'low' }}" 
                                 style="width: {{ cu.pc_covered }}%"></div>
                        </div>
                    </div>

                    {% if cu.n_branches %}
                    <div class="summary-card {{ 'success' if cu.pc_covered_branches >= 90 else 'warning' if cu.pc_covered_branches >= 70 else 'critical' }}">
                        <h3>Branch Coverage</h3>
                        <div class="metric {{ 'high' if cu.pc_covered_branches >= 90 else 'medium' if cu.pc_covered_branches >= 70 else 'low' }}">
                            {{ "%.1f" | format(cu.pc_covered_branches) }}%
                        </div>
                        <div class="description">
                            {{ cu.n_branches - cu.n_missing_branches }}/{{ cu.n_branches }} branches covered
                        </div>
                        <div class="coverage-bar">
                            <div class="coverage-bar-fill {{ 'high' if cu.pc_covered_branches >= 90 else 'medium' if cu.pc_covered_branches >= 70 else 'low' }}" 
                                 style="width: {{ cu.pc_covered_branches }}%"></div>
                        </div>
                    </div>
                    {% endif %}

                    <div class="summary-card {{ 'success' if cu.n_missing == 0 else 'warning' if cu.n_missing <= 5 else 'critical' }}">
                        <h3>Missing Lines</h3>
                        <div class="metric {{ 'high' if cu.n_missing == 0 else 'medium' if cu.n_missing <= 5 else 'low' }}">
                            {{ cu.n_missing }}
                        </div>
                        <div class="description">
                            {% if cu.n_missing == 0 %}
                                Perfect coverage achieved
                            {% elif cu.n_missing <= 5 %}
                                Minor gaps in coverage
                            {% else %}
                                Significant coverage gaps
                            {% endif %}
                        </div>
                    </div>

                    {# Quality indicator based on module criticality #}
                    <div class="summary-card {{ 'success' if (is_critical and cu.pc_covered == 100) or (not is_critical and cu.pc_covered >= 90) else 'critical' }}">
                        <h3>Quality Status</h3>
                        <div class="metric">
                            {% if is_critical and cu.pc_covered == 100 %}
                                ‚úÖ
                            {% elif is_critical and cu.pc_covered < 100 %}
                                ‚ùå
                            {% elif not is_critical and cu.pc_covered >= 90 %}
                                ‚úÖ
                            {% else %}
                                ‚ö†Ô∏è
                            {% endif %}
                        </div>
                        <div class="description">
                            {% if is_critical %}
                                Critical module: 100% required
                            {% else %}
                                Standard module: ‚â•90% target
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>
        </section>

        {# Interactive controls for coverage visualization #}
        <section class="content" aria-labelledby="coverage-controls">
            <h3 id="coverage-controls">Coverage Analysis Controls</h3>
            <div class="toggle-group" role="group" aria-label="Coverage display options">
                <button class="toggle-btn active" id="show-all" aria-pressed="true">Show All Lines</button>
                <button class="toggle-btn" id="show-covered" aria-pressed="false">Show Covered Only</button>
                <button class="toggle-btn" id="show-uncovered" aria-pressed="false">Show Uncovered Only</button>
                {% if cu.n_branches %}
                <button class="toggle-btn" id="show-branches" aria-pressed="false">Highlight Branches</button>
                {% endif %}
                <button class="toggle-btn" id="show-excluded" aria-pressed="false">Show Excluded</button>
            </div>
            
            {# Line number jump control #}
            <div class="source-controls">
                <label for="line-jump">Jump to line:</label>
                <input type="number" id="line-jump" min="1" max="{{ cu.source.splitlines() | length }}" 
                       placeholder="Line number" aria-describedby="line-jump-help">
                <button type="button" onclick="jumpToLine()" class="btn btn-secondary btn-sm">Go</button>
                <span id="line-jump-help" class="sr-only">Enter a line number to quickly navigate to that location in the source code</span>
            </div>
        </section>

        {# Source code display with coverage annotations #}
        <section class="source-file" aria-labelledby="source-code-heading">
            <div class="source-header">
                <h3 id="source-code-heading">Source Code with Coverage Analysis</h3>
                <div class="source-stats">
                    <div class="source-stat">
                        <span class="stat-label">Total Lines:</span>
                        <span class="stat-value">{{ cu.source.splitlines() | length }}</span>
                    </div>
                    <div class="source-stat">
                        <span class="stat-label">Module Category:</span>
                        <span class="stat-value">{{ module_category | title if module_category else 'General' }}</span>
                    </div>
                </div>
            </div>

            <div class="source-content">
                <pre class="source-code" role="region" aria-label="Python source code with coverage annotations">
{%- for line_no, line_text in cu.source.splitlines() | enumerate(1) -%}
{%- set line_info = cu.lines.get(line_no) -%}
{%- set is_executable = line_no in cu.statements -%}
{%- set is_missing = line_no in cu.missing -%}
{%- set is_excluded = line_no in cu.excluded -%}
{%- set is_branch = line_no in cu.branch_lines() -%}
{%- set branch_coverage = cu.branch_coverage.get(line_no, {}) if cu.branch_coverage else {} -%}

<div class="source-line
{%- if is_excluded %} excluded
{%- elif is_missing %} uncovered
{%- elif is_executable %} covered
{%- endif -%}
{%- if is_branch %}
  {%- if branch_coverage.get('covered_branches', 0) == branch_coverage.get('total_branches', 0) %} branch-covered
  {%- elif branch_coverage.get('covered_branches', 0) > 0 %} branch-partial  
  {%- else %} branch-uncovered
  {%- endif -%}
{%- endif %}"
     data-line-number="{{ line_no }}"
     {% if is_executable %}data-executable="true"{% endif %}
     {% if is_missing %}data-missing="true"{% endif %}
     {% if is_excluded %}data-excluded="true"{% endif %}
     {% if is_branch %}data-branch="true" data-branch-coverage="{{ branch_coverage }}"{% endif %}
     id="line-{{ line_no }}"
     tabindex="0"
     role="button"
     aria-label="Line {{ line_no }}: {% if is_missing %}Not covered{% elif is_executable %}Covered{% elif is_excluded %}Excluded{% else %}Not executable{% endif %}{% if is_branch %}, Branch line{% endif %}">
    <span class="line-number" aria-hidden="true">{{ line_no }}</span>
    <code class="line-content">{{ line_text | highlight_python | safe }}</code>
    
    {# Branch coverage tooltip #}
    {% if is_branch and branch_coverage %}
    <div class="tooltip">
        <span class="tooltip-content">
            Branch Coverage: {{ branch_coverage.get('covered_branches', 0) }}/{{ branch_coverage.get('total_branches', 0) }}
            {% if branch_coverage.get('missing_branches') %}
            <br>Missing: {{ branch_coverage.get('missing_branches') | join(', ') }}
            {% endif %}
        </span>
    </div>
    {% endif %}
</div>
{%- endfor -%}
                </pre>
            </div>
        </section>

        {# Missing coverage details #}
        {% if cu.missing %}
        <section class="content" aria-labelledby="missing-coverage">
            <h3 id="missing-coverage">Missing Coverage Analysis</h3>
            <div class="experimental-context">
                <h4>‚ö†Ô∏è Uncovered Lines Requiring Attention</h4>
                <p>The following lines lack test coverage and may represent risk areas in experimental data processing workflows:</p>
                
                <div class="coverage-table-wrapper">
                    <table class="coverage-table" role="table" aria-label="Missing coverage details">
                        <thead>
                            <tr>
                                <th scope="col">Line Range</th>
                                <th scope="col">Code Preview</th>
                                <th scope="col">Risk Level</th>
                                <th scope="col">Recommendations</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for line_no in cu.missing | sort %}
                            {% set line_text = cu.source.splitlines()[line_no - 1] if line_no <= cu.source.splitlines() | length %}
                            <tr>
                                <td><a href="#line-{{ line_no }}" class="file-name">{{ line_no }}</a></td>
                                <td><code>{{ line_text | truncate(50) if line_text }}</code></td>
                                <td>
                                    <span class="coverage-percentage {{ 'high' if 'raise' in line_text or 'except' in line_text else 'medium' if 'return' in line_text or 'break' in line_text else 'low' }}">
                                        {% if 'raise' in line_text or 'except' in line_text %}
                                            Critical
                                        {% elif 'return' in line_text or 'break' in line_text %}
                                            Medium
                                        {% else %}
                                            Standard
                                        {% endif %}
                                    </span>
                                </td>
                                <td>
                                    {% if 'raise' in line_text or 'except' in line_text %}
                                        Add error handling test case
                                    {% elif 'return' in line_text %}
                                        Test return value validation
                                    {% elif 'break' in line_text or 'continue' in line_text %}
                                        Test loop control logic
                                    {% else %}
                                        Add comprehensive test case
                                    {% endif %}
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </section>
        {% endif %}

        {# Branch coverage details #}
        {% if cu.n_branches and cu.missing_branches %}
        <section class="content" aria-labelledby="branch-coverage">
            <h3 id="branch-coverage">Branch Coverage Analysis</h3>
            <div class="experimental-context">
                <h4>üîÄ Missing Branch Coverage</h4>
                <p>The following conditional branches lack test coverage, potentially missing edge cases in experimental data validation:</p>
                
                <div class="coverage-table-wrapper">
                    <table class="coverage-table" role="table" aria-label="Missing branch coverage details">
                        <thead>
                            <tr>
                                <th scope="col">Line</th>
                                <th scope="col">Branch Condition</th>
                                <th scope="col">Missing Paths</th>
                                <th scope="col">Test Strategy</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for line_no, branches in cu.missing_branches.items() %}
                            {% set line_text = cu.source.splitlines()[line_no - 1] if line_no <= cu.source.splitlines() | length %}
                            <tr>
                                <td><a href="#line-{{ line_no }}" class="file-name">{{ line_no }}</a></td>
                                <td><code>{{ line_text | truncate(40) if line_text }}</code></td>
                                <td>
                                    {% for branch in branches %}
                                        <span class="coverage-percentage low">{{ branch }}</span>
                                    {% endfor %}
                                </td>
                                <td>
                                    {% if 'if' in line_text %}
                                        Test both True/False conditions
                                    {% elif 'try' in line_text %}
                                        Test exception scenarios
                                    {% elif 'for' in line_text or 'while' in line_text %}
                                        Test empty/non-empty iterations
                                    {% else %}
                                        Test alternative execution paths
                                    {% endif %}
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </section>
        {% endif %}

        {# Function-level coverage breakdown #}
        {% if cu.functions %}
        <section class="content" aria-labelledby="function-coverage">
            <h3 id="function-coverage">Function-Level Coverage Analysis</h3>
            <div class="module-grid">
                {% for func_name, func_data in cu.functions.items() %}
                <div class="module-card {{ module_category if module_category }}">
                    <div class="module-header">
                        <div class="module-title">{{ func_name }}()</div>
                        <div class="module-category">
                            {% if func_name.startswith('_') %}
                                Private Function
                            {% elif func_name in ['load_data', 'validate_data', 'transform_data'] %}
                                Core Data Function
                            {% else %}
                                Public Function
                            {% endif %}
                        </div>
                    </div>
                    <div class="module-stats">
                        <div class="stat-row">
                            <span class="stat-label">Coverage:</span>
                            <span class="stat-value {{ 'high' if func_data.pc_covered >= 90 else 'medium' if func_data.pc_covered >= 70 else 'low' }}">
                                {{ "%.1f" | format(func_data.pc_covered) }}%
                            </span>
                        </div>
                        <div class="stat-row">
                            <span class="stat-label">Lines:</span>
                            <span class="stat-value">{{ func_data.n_statements }}</span>
                        </div>
                        <div class="stat-row">
                            <span class="stat-label">Missing:</span>
                            <span class="stat-value {{ 'high' if func_data.n_missing == 0 else 'medium' if func_data.n_missing <= 2 else 'low' }}">
                                {{ func_data.n_missing }}
                            </span>
                        </div>
                    </div>
                </div>
                {% endfor %}
            </div>
        </section>
        {% endif %}

    </main>

    {# Footer with metadata and links #}
    <footer class="footer" role="contentinfo">
        <div class="footer-content">
            <h3>FlyRigLoader Coverage Enhancement System</h3>
            <p>Generated by coverage.py {{ coverage_version }} with flyrigloader-specific templates</p>
            <p>Report generated on {{ timestamp | default('Unknown') }} for neuroscience experimental data loading library</p>
            
            <div class="footer-links">
                <a href="index.html">Coverage Home</a>
                <a href="https://github.com/flyrigloader/flyrigloader" target="_blank" rel="noopener">Project Repository</a>
                <a href="https://coverage.readthedocs.io/" target="_blank" rel="noopener">Coverage.py Documentation</a>
            </div>
        </div>
    </footer>

    {# JavaScript for interactive functionality #}
    <script>
        // Hide loading indicator once page is ready
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('loading').style.display = 'none';
        });

        // Coverage line filtering functionality
        const toggleButtons = document.querySelectorAll('.toggle-btn');
        const sourceLines = document.querySelectorAll('.source-line');

        toggleButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Update button states
                toggleButtons.forEach(btn => {
                    btn.classList.remove('active');
                    btn.setAttribute('aria-pressed', 'false');
                });
                this.classList.add('active');
                this.setAttribute('aria-pressed', 'true');

                // Filter source lines based on selection
                const filter = this.id;
                sourceLines.forEach(line => {
                    let show = true;
                    
                    switch(filter) {
                        case 'show-covered':
                            show = line.classList.contains('covered');
                            break;
                        case 'show-uncovered':
                            show = line.classList.contains('uncovered');
                            break;
                        case 'show-branches':
                            show = line.hasAttribute('data-branch');
                            break;
                        case 'show-excluded':
                            show = line.classList.contains('excluded');
                            break;
                        default: // show-all
                            show = true;
                    }
                    
                    line.style.display = show ? 'flex' : 'none';
                });
            });
        });

        // Jump to line functionality
        function jumpToLine() {
            const lineNumber = parseInt(document.getElementById('line-jump').value);
            const targetLine = document.getElementById(`line-${lineNumber}`);
            
            if (targetLine) {
                targetLine.scrollIntoView({ 
                    behavior: 'smooth', 
                    block: 'center' 
                });
                targetLine.focus();
                
                // Add highlight effect
                targetLine.style.animation = 'highlight 2s ease-out';
                setTimeout(() => {
                    targetLine.style.animation = '';
                }, 2000);
            } else {
                alert(`Line ${lineNumber} not found. Please enter a line number between 1 and {{ cu.source.splitlines() | length }}.`);
            }
        }

        // Enhanced keyboard navigation
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey || e.metaKey) {
                switch(e.key) {
                    case 'f':
                        e.preventDefault();
                        document.getElementById('line-jump').focus();
                        break;
                    case 'g':
                        e.preventDefault();
                        jumpToLine();
                        break;
                }
            }
        });

        // Line click to show detailed information
        sourceLines.forEach(line => {
            line.addEventListener('click', function() {
                const lineNo = this.getAttribute('data-line-number');
                const isMissing = this.hasAttribute('data-missing');
                const isBranch = this.hasAttribute('data-branch');
                const isExecutable = this.hasAttribute('data-executable');
                
                let message = `Line ${lineNo}: `;
                if (isMissing) {
                    message += 'Not covered by tests';
                } else if (isExecutable) {
                    message += 'Covered by tests';
                } else {
                    message += 'Not executable';
                }
                
                if (isBranch) {
                    const branchData = this.getAttribute('data-branch-coverage');
                    message += ', Branch line';
                }
                
                // Update URL hash for easy sharing
                window.location.hash = `line-${lineNo}`;
                
                console.log(message); // For debugging
            });
        });

        // CSS animation for line highlighting
        const style = document.createElement('style');
        style.textContent = `
            @keyframes highlight {
                0% { background-color: var(--accent-color); }
                100% { background-color: transparent; }
            }
        `;
        document.head.appendChild(style);

        // Accessibility: Announce filter changes to screen readers
        function announceFilterChange(filterType) {
            const announcement = document.createElement('div');
            announcement.setAttribute('aria-live', 'polite');
            announcement.setAttribute('aria-atomic', 'true');
            announcement.className = 'sr-only';
            announcement.textContent = `Coverage display filtered to show ${filterType.replace('show-', '').replace('-', ' ')} lines`;
            document.body.appendChild(announcement);
            
            setTimeout(() => {
                document.body.removeChild(announcement);
            }, 1000);
        }

        // Progressive enhancement: Add advanced features if JavaScript is enabled
        document.body.classList.add('js-enabled');
    </script>

    {# Structured data for SEO and metadata #}
    <script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "SoftwareApplication",
        "name": "FlyRigLoader Coverage Report",
        "description": "Coverage analysis for {{ cu.file_path | basename }} - Neuroscience experimental data loading library",
        "applicationCategory": "DeveloperApplication",
        "operatingSystem": "Cross-platform",
        "programmingLanguage": "Python",
        "author": {
            "@type": "Organization",
            "name": "FlyRigLoader Team"
        },
        "dateCreated": "{{ timestamp | default('2024-06-05') }}",
        "version": "{{ coverage_version | default('7.0+') }}"
    }
    </script>
</body>
</html>
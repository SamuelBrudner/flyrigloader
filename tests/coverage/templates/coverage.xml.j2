<?xml version="1.0" encoding="UTF-8"?>
<!--
FlyrigLoader XML Coverage Report Template
=====================================

Comprehensive XML coverage report template for CI/CD integration providing machine-readable
coverage data with comprehensive metadata, build information, and automated quality gate
integration per TST-COV-003 requirements.

Features:
- Machine-readable coverage data structure with detailed module breakdowns
- CI/CD integration metadata including build timestamps, branch info, and commit details
- Quality gate metadata with automated threshold validation and regression detection
- Performance SLA integration with data loading and transformation coverage metrics
- Flyrigloader-specific module organization with neuroscience research domain metadata
- Detailed error reporting with uncovered line identification and critical path analysis

Format: Cobertura XML v4.0 compatible with GitHub Actions, Jenkins, SonarQube integration
Generated: {{ timestamp }}
Build: {{ build_number }} | Branch: {{ branch_name }} | Commit: {{ commit_hash[:8] }}
-->

<coverage 
    version="{{ format_version | default('4.0') }}" 
    timestamp="{{ timestamp }}" 
    lines-valid="{{ total_lines }}" 
    lines-covered="{{ covered_lines }}" 
    line-rate="{{ (covered_lines / total_lines) | round(4) if total_lines > 0 else 0.0 }}"
    branches-valid="{{ total_branches }}" 
    branches-covered="{{ covered_branches }}" 
    branch-rate="{{ (covered_branches / total_branches) | round(4) if total_branches > 0 else 0.0 }}"
    complexity="0">

    <!-- ================================================================ -->
    <!-- CI/CD INTEGRATION METADATA -->
    <!-- ================================================================ -->
    <!-- Build and environment information for automated quality assurance -->
    <metadata>
        <project>
            <name>flyrigloader</name>
            <domain>neuroscience-research</domain>
            <organization>Research Team</organization>
            <repository_url>{{ repository_url | default('https://github.com/research-team/flyrigloader') }}</repository_url>
            <documentation_url>{{ documentation_url | default('https://flyrigloader.readthedocs.io') }}</documentation_url>
            <license>MIT</license>
            <python_versions>{{ python_versions | join(', ') | default('3.8, 3.9, 3.10, 3.11') }}</python_versions>
        </project>
        
        <build_info>
            <build_number>{{ build_number | default('${BUILD_NUMBER}') }}</build_number>
            <build_url>{{ build_url | default('${BUILD_URL}') }}</build_url>
            <branch_name>{{ branch_name | default('${BRANCH_NAME}') }}</branch_name>
            <commit_hash>{{ commit_hash | default('${COMMIT_SHA}') }}</commit_hash>
            <commit_message>{{ commit_message | default('${COMMIT_MESSAGE}') | e }}</commit_message>
            <pull_request_id>{{ pull_request_id | default('${PR_NUMBER}') }}</pull_request_id>
            <build_timestamp>{{ build_timestamp | default('${BUILD_TIMESTAMP}') }}</build_timestamp>
            <build_duration>{{ build_duration | default('${BUILD_DURATION}') }}</build_duration>
            <test_execution_time>{{ test_execution_time | default('${TEST_DURATION}') }}</test_execution_time>
            <environment>{{ environment | default('${CI_ENVIRONMENT}') }}</environment>
            <runner_os>{{ runner_os | default('${RUNNER_OS}') }}</runner_os>
            <python_version>{{ python_version | default('${PYTHON_VERSION}') }}</python_version>
        </build_info>
        
        <coverage_context>
            <generated_by>pytest-cov {{ pytest_cov_version | default('6.1.1') }}</generated_by>
            <coverage_tool>coverage.py {{ coverage_version | default('7.8.2') }}</coverage_tool>
            <report_generator>flyrigloader-coverage-system</report_generator>
            <template_version>1.0.0</template_version>
            <context_type>{{ context_type | default('test') }}</context_type>
            <parallel_execution>{{ parallel_execution | default(true) | lower }}</parallel_execution>
            <subprocess_coverage>{{ subprocess_coverage | default(true) | lower }}</subprocess_coverage>
        </coverage_context>
    </metadata>

    <!-- ================================================================ -->
    <!-- QUALITY GATE VALIDATION -->
    <!-- ================================================================ -->
    <!-- Automated threshold validation and quality assurance integration -->
    <quality_gates>
        <overall_coverage>
            <threshold>{{ quality_gates.overall_coverage.minimum | default(90.0) }}</threshold>
            <actual>{{ (covered_lines / total_lines * 100) | round(2) if total_lines > 0 else 0.0 }}</actual>
            <status>{{ 'PASS' if (covered_lines / total_lines * 100) >= (quality_gates.overall_coverage.minimum | default(90.0)) else 'FAIL' }}</status>
            <blocking>{{ quality_gates.overall_coverage.blocking | default(true) | lower }}</blocking>
        </overall_coverage>
        
        <critical_modules>
            <threshold>{{ quality_gates.critical_modules.minimum | default(100.0) }}</threshold>
            <actual>{{ critical_modules_coverage | round(2) | default(0.0) }}</actual>
            <status>{{ 'PASS' if critical_modules_coverage >= (quality_gates.critical_modules.minimum | default(100.0)) else 'FAIL' }}</status>
            <blocking>{{ quality_gates.critical_modules.blocking | default(true) | lower }}</blocking>
        </critical_modules>
        
        <branch_coverage>
            <threshold>{{ quality_gates.branch_coverage.minimum | default(85.0) }}</threshold>
            <actual>{{ (covered_branches / total_branches * 100) | round(2) if total_branches > 0 else 0.0 }}</actual>
            <status>{{ 'PASS' if (covered_branches / total_branches * 100) >= (quality_gates.branch_coverage.minimum | default(85.0)) else 'FAIL' }}</status>
            <blocking>{{ quality_gates.branch_coverage.blocking | default(true) | lower }}</blocking>
        </branch_coverage>
        
        <quality_gate_decision>
            {% set overall_pass = (covered_lines / total_lines * 100) >= (quality_gates.overall_coverage.minimum | default(90.0)) %}
            {% set critical_pass = critical_modules_coverage >= (quality_gates.critical_modules.minimum | default(100.0)) %}
            {% set branch_pass = (covered_branches / total_branches * 100) >= (quality_gates.branch_coverage.minimum | default(85.0)) %}
            <status>{{ 'PASS' if (overall_pass and critical_pass and branch_pass) else 'FAIL' }}</status>
            <merge_allowed>{{ (overall_pass and critical_pass and branch_pass) | lower }}</merge_allowed>
            <violations>
                {% if not overall_pass %}<violation type="overall_coverage">Below {{ quality_gates.overall_coverage.minimum | default(90.0) }}% threshold</violation>{% endif %}
                {% if not critical_pass %}<violation type="critical_modules">Critical modules below {{ quality_gates.critical_modules.minimum | default(100.0) }}% threshold</violation>{% endif %}
                {% if not branch_pass %}<violation type="branch_coverage">Branch coverage below {{ quality_gates.branch_coverage.minimum | default(85.0) }}% threshold</violation>{% endif %}
            </violations>
        </quality_gate_decision>
    </quality_gates>

    <!-- ================================================================ -->
    <!-- PERFORMANCE SLA INTEGRATION -->
    <!-- ================================================================ -->
    <!-- Data loading and transformation performance metrics per TST-PERF requirements -->
    <performance_sla>
        <data_loading>
            <sla_requirement>1s per 100MB</sla_requirement>
            <max_time_per_mb>0.01</max_time_per_mb>
            <coverage_modules>
                <module name="src/flyrigloader/io/pickle.py" coverage="{{ modules.get('src/flyrigloader/io/pickle.py', {}).get('line_rate', 0.0) * 100 | round(2) }}%" />
            </coverage_modules>
        </data_loading>
        
        <dataframe_transformation>
            <sla_requirement>500ms per 1M rows</sla_requirement>
            <max_time_per_million_rows>0.5</max_time_per_million_rows>
            <coverage_modules>
                <module name="src/flyrigloader/io/column_models.py" coverage="{{ modules.get('src/flyrigloader/io/column_models.py', {}).get('line_rate', 0.0) * 100 | round(2) }}%" />
                <module name="src/flyrigloader/utils/dataframe.py" coverage="{{ modules.get('src/flyrigloader/utils/dataframe.py', {}).get('line_rate', 0.0) * 100 | round(2) }}%" />
            </coverage_modules>
        </dataframe_transformation>
        
        <benchmark_integration>
            <enabled>{{ performance_benchmarks_enabled | default(true) | lower }}</enabled>
            <last_execution>{{ benchmark_last_execution | default('N/A') }}</last_execution>
            <results_url>{{ benchmark_results_url | default('tests/coverage/benchmarks/') }}</results_url>
        </benchmark_integration>
    </performance_sla>

    <!-- ================================================================ -->
    <!-- MODULE CATEGORIZATION AND ANALYSIS -->
    <!-- ================================================================ -->
    <!-- Flyrigloader-specific module organization with neuroscience research domain metadata -->
    <module_analysis>
        <critical_modules coverage="{{ critical_modules_coverage | round(2) }}%">
            {% for module_name in critical_modules | default([]) %}
            {% set module_data = modules.get(module_name, {}) %}
            <module name="{{ module_name }}" 
                    line_rate="{{ module_data.get('line_rate', 0.0) }}" 
                    branch_rate="{{ module_data.get('branch_rate', 0.0) }}"
                    complexity="{{ module_data.get('complexity', 0) }}"
                    status="{{ 'PASS' if (module_data.get('line_rate', 0.0) * 100) >= 100.0 else 'FAIL' }}">
                <description>{{ module_descriptions.get(module_name, 'Critical module for flyrigloader functionality') }}</description>
                <neuroscience_context>{{ neuroscience_context.get(module_name, 'Core neuroscience data processing') }}</neuroscience_context>
            </module>
            {% endfor %}
        </critical_modules>
        
        <utility_modules coverage="{{ utility_modules_coverage | round(2) }}%">
            {% for module_name in utility_modules | default([]) %}
            {% set module_data = modules.get(module_name, {}) %}
            <module name="{{ module_name }}" 
                    line_rate="{{ module_data.get('line_rate', 0.0) }}" 
                    branch_rate="{{ module_data.get('branch_rate', 0.0) }}"
                    complexity="{{ module_data.get('complexity', 0) }}"
                    status="{{ 'PASS' if (module_data.get('line_rate', 0.0) * 100) >= 95.0 else 'FAIL' }}">
                <description>{{ module_descriptions.get(module_name, 'Supporting utility functionality') }}</description>
                <neuroscience_context>{{ neuroscience_context.get(module_name, 'Supporting experimental data workflows') }}</neuroscience_context>
            </module>
            {% endfor %}
        </utility_modules>
        
        <infrastructure_modules coverage="{{ infrastructure_modules_coverage | round(2) }}%">
            {% for module_name in infrastructure_modules | default([]) %}
            {% set module_data = modules.get(module_name, {}) %}
            <module name="{{ module_name }}" 
                    line_rate="{{ module_data.get('line_rate', 0.0) }}" 
                    branch_rate="{{ module_data.get('branch_rate', 0.0) }}"
                    complexity="{{ module_data.get('complexity', 0) }}"
                    status="{{ 'PASS' if (module_data.get('line_rate', 0.0) * 100) >= 90.0 else 'FAIL' }}">
                <description>{{ module_descriptions.get(module_name, 'Infrastructure and initialization') }}</description>
                <neuroscience_context>{{ neuroscience_context.get(module_name, 'System infrastructure') }}</neuroscience_context>
            </module>
            {% endfor %}
        </infrastructure_modules>
    </module_analysis>

    <!-- ================================================================ -->
    <!-- COBERTURA SOURCE FILES STRUCTURE -->
    <!-- ================================================================ -->
    <!-- Standard Cobertura XML format for broad CI/CD tool compatibility -->
    <sources>
        {% for source_path in sources | default(['src/flyrigloader']) %}
        <source>{{ source_path }}</source>
        {% endfor %}
    </sources>

    <packages>
        {% for package_name, package_data in packages.items() %}
        <package name="{{ package_name }}" 
                 line-rate="{{ package_data.line_rate | round(4) }}" 
                 branch-rate="{{ package_data.branch_rate | round(4) }}" 
                 complexity="{{ package_data.complexity | default(0) }}">
            <classes>
                {% for class_name, class_data in package_data.classes.items() %}
                <class name="{{ class_name }}" 
                       filename="{{ class_data.filename }}" 
                       line-rate="{{ class_data.line_rate | round(4) }}" 
                       branch-rate="{{ class_data.branch_rate | round(4) }}" 
                       complexity="{{ class_data.complexity | default(0) }}">
                    
                    <methods>
                        {% for method_name, method_data in class_data.methods.items() %}
                        <method name="{{ method_name }}" 
                                signature="{{ method_data.signature | default('') }}" 
                                line-rate="{{ method_data.line_rate | round(4) }}" 
                                branch-rate="{{ method_data.branch_rate | round(4) }}">
                            <lines>
                                {% for line_num, line_data in method_data.lines.items() %}
                                <line number="{{ line_num }}" 
                                      hits="{{ line_data.hits }}" 
                                      branch="{{ line_data.branch | default('false') | lower }}"
                                      {% if line_data.condition_coverage %}condition-coverage="{{ line_data.condition_coverage }}"{% endif %} />
                                {% endfor %}
                            </lines>
                        </method>
                        {% endfor %}
                    </methods>
                    
                    <lines>
                        {% for line_num, line_data in class_data.lines.items() %}
                        <line number="{{ line_num }}" 
                              hits="{{ line_data.hits }}" 
                              branch="{{ line_data.branch | default('false') | lower }}"
                              {% if line_data.condition_coverage %}condition-coverage="{{ line_data.condition_coverage }}"{% endif %} />
                        {% endfor %}
                    </lines>
                </class>
                {% endfor %}
            </classes>
        </package>
        {% endfor %}
    </packages>

    <!-- ================================================================ -->
    <!-- DETAILED ERROR REPORTING AND ANALYSIS -->
    <!-- ================================================================ -->
    <!-- Comprehensive uncovered line identification and actionable feedback -->
    <uncovered_analysis>
        <summary>
            <total_uncovered_lines>{{ total_lines - covered_lines }}</total_uncovered_lines>
            <critical_uncovered_lines>{{ critical_uncovered_lines | default(0) }}</critical_uncovered_lines>
            <uncovered_percentage>{{ ((total_lines - covered_lines) / total_lines * 100) | round(2) if total_lines > 0 else 0.0 }}</uncovered_percentage>
        </summary>
        
        <critical_paths>
            {% for module_name in critical_modules | default([]) %}
            {% set module_data = modules.get(module_name, {}) %}
            {% if module_data.get('uncovered_lines', []) %}
            <critical_module name="{{ module_name }}" 
                           uncovered_count="{{ module_data.uncovered_lines | length }}"
                           coverage="{{ (module_data.get('line_rate', 0.0) * 100) | round(2) }}%">
                <uncovered_lines>
                    {% for line_num in module_data.uncovered_lines %}
                    <line number="{{ line_num }}" 
                          context="{{ module_data.line_contexts.get(line_num | string, 'unknown') }}"
                          criticality="high" />
                    {% endfor %}
                </uncovered_lines>
                <actionable_feedback>
                    <message>Critical module {{ module_name }} requires 100% coverage. Add tests for {{ module_data.uncovered_lines | length }} uncovered lines.</message>
                    <test_suggestions>
                        {% for suggestion in module_data.test_suggestions | default([]) %}
                        <suggestion>{{ suggestion }}</suggestion>
                        {% endfor %}
                    </test_suggestions>
                </actionable_feedback>
            </critical_module>
            {% endif %}
            {% endfor %}
        </critical_paths>
        
        <risk_assessment>
            <high_risk_modules>
                {% for module_name, risk_data in high_risk_modules.items() | default([]) %}
                <module name="{{ module_name }}" 
                        risk_score="{{ risk_data.score }}" 
                        coverage="{{ risk_data.coverage }}%"
                        complexity="{{ risk_data.complexity }}">
                    <risk_factors>
                        {% for factor in risk_data.factors %}
                        <factor>{{ factor }}</factor>
                        {% endfor %}
                    </risk_factors>
                    <mitigation_recommendations>
                        {% for recommendation in risk_data.recommendations %}
                        <recommendation>{{ recommendation }}</recommendation>
                        {% endfor %}
                    </mitigation_recommendations>
                </module>
                {% endfor %}
            </high_risk_modules>
        </risk_assessment>
    </uncovered_analysis>

    <!-- ================================================================ -->
    <!-- TREND ANALYSIS AND REGRESSION DETECTION -->
    <!-- ================================================================ -->
    <!-- Historical comparison and performance tracking -->
    <trend_analysis>
        <baseline_comparison>
            <baseline_coverage>{{ baseline_coverage | default(0.0) }}%</baseline_coverage>
            <current_coverage>{{ (covered_lines / total_lines * 100) | round(2) if total_lines > 0 else 0.0 }}%</current_coverage>
            <coverage_delta>{{ ((covered_lines / total_lines * 100) - baseline_coverage) | round(2) if total_lines > 0 else 0.0 }}%</coverage_delta>
            <trend>{{ 'improving' if ((covered_lines / total_lines * 100) - baseline_coverage) > 0 else 'declining' if ((covered_lines / total_lines * 100) - baseline_coverage) < 0 else 'stable' }}</trend>
        </baseline_comparison>
        
        <regression_detection>
            <regression_threshold>{{ regression_threshold | default(1.0) }}%</regression_threshold>
            <regression_detected>{{ (((covered_lines / total_lines * 100) - baseline_coverage) < -regression_threshold) | lower }}</regression_detected>
            {% if ((covered_lines / total_lines * 100) - baseline_coverage) < -regression_threshold %}
            <regression_alert>
                <severity>high</severity>
                <message>Coverage regression detected: {{ ((covered_lines / total_lines * 100) - baseline_coverage) | round(2) }}% below baseline</message>
                <action_required>true</action_required>
            </regression_alert>
            {% endif %}
        </regression_detection>
        
        <historical_data>
            <retention_days>{{ retention_days | default(365) }}</retention_days>
            <data_points>{{ historical_data_points | default(0) }}</data_points>
            <last_updated>{{ last_updated | default(timestamp) }}</last_updated>
        </historical_data>
    </trend_analysis>

    <!-- ================================================================ -->
    <!-- EXTERNAL TOOL INTEGRATION -->
    <!-- ================================================================ -->
    <!-- Compatibility metadata for external CI/CD and monitoring tools -->
    <external_integration>
        <codecov>
            <compatible>true</compatible>
            <upload_url>{{ codecov_upload_url | default('https://codecov.io/upload') }}</upload_url>
            <project_token>{{ codecov_token | default('${CODECOV_TOKEN}') }}</project_token>
        </codecov>
        
        <sonarqube>
            <compatible>true</compatible>
            <project_key>{{ sonarqube_project_key | default('flyrigloader') }}</project_key>
            <quality_gate_integration>true</quality_gate_integration>
        </sonarqube>
        
        <github_actions>
            <workflow_integration>true</workflow_integration>
            <status_checks>true</status_checks>
            <pr_comments>true</pr_comments>
            <badge_generation>true</badge_generation>
        </github_actions>
        
        <jenkins>
            <build_integration>true</build_integration>
            <artifact_archival>true</artifact_archival>
            <notification_webhook>{{ jenkins_webhook | default('${JENKINS_WEBHOOK}') }}</notification_webhook>
        </jenkins>
    </external_integration>

    <!-- ================================================================ -->
    <!-- REPORT GENERATION METADATA -->
    <!-- ================================================================ -->
    <!-- Template and generation information for debugging and maintenance -->
    <generation_info>
        <template_file>tests/coverage/templates/coverage.xml.j2</template_file>
        <template_version>1.0.0</template_version>
        <generated_at>{{ timestamp }}</generated_at>
        <generator>flyrigloader-coverage-system</generator>
        <configuration_source>tests/coverage/report-config.json</configuration_source>
        <quality_gates_source>tests/coverage/quality-gates.yml</quality_gates_source>
        <specification_compliance>
            <requirement>TST-COV-003</requirement>
            <requirement>TST-COV-004</requirement>
            <requirement>Section 3.6.4</requirement>
            <requirement>Section 4.1.1.5</requirement>
        </specification_compliance>
    </generation_info>

</coverage>
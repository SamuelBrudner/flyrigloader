{%- 
  """
  FlyrigLoader JSON Coverage Report Template
  
  Comprehensive JSON coverage report template for programmatic analysis providing 
  structured coverage data with comprehensive metrics, trend analysis, and automated 
  processing capabilities. Enables detailed coverage analysis and integration with 
  external monitoring systems per TST-COV-003 requirements.
  
  Template Variables:
    - coverage_data: Main coverage data object from coverage.py
    - meta: Coverage measurement metadata (timestamp, environment, etc.)
    - thresholds: Coverage threshold configuration from coverage-thresholds.json
    - config: Report configuration from report-config.json
    - performance_data: Performance benchmark data (optional)
    - baseline_data: Historical baseline coverage data (optional)
    - build_info: CI/CD build information (optional)
  
  Output Format: JSON with comprehensive coverage metrics, trend analysis, and
  flyrigloader-specific neuroscience research domain context.
  """
-%}
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "report_metadata": {
    "format_version": "2.0",
    "schema_version": "coverage-report-v2.0",
    "generated_timestamp": "{{ meta.timestamp | default(now().isoformat()) }}",
    "report_type": "comprehensive_coverage_analysis",
    "template_version": "1.0.0",
    "coverage_tool": {
      "name": "coverage.py",
      "version": "{{ meta.coverage_version | default('7.8.2') }}",
      "pytest_cov_version": "{{ meta.pytest_cov_version | default('6.1.1') }}"
    },
    "project_context": {
      "name": "flyrigloader",
      "domain": "neuroscience-research",
      "organization": "{{ config.metadata.organization | default('Research Team') }}",
      "repository_url": "{{ config.metadata.repository_url | default('https://github.com/research-team/flyrigloader') }}",
      "documentation_url": "{{ config.metadata.documentation_url | default('https://flyrigloader.readthedocs.io') }}",
      "license": "{{ config.metadata.license | default('MIT') }}",
      "python_versions": {{ config.metadata.python_versions | default(['3.8', '3.9', '3.10', '3.11']) | tojson }},
      "created_by": "{{ config.metadata.created_by | default('coverage-enhancement-system') }}"
    }
  },
  
  "execution_context": {
    "environment": {
      "python_version": "{{ meta.python_version | default('') }}",
      "platform": "{{ meta.platform | default('') }}",
      "hostname": "{{ meta.hostname | default('') }}",
      "working_directory": "{{ meta.working_directory | default('') }}"
    },
    "ci_cd_context": {
      {% if build_info -%}
      "build_number": "{{ build_info.build_number | default('') }}",
      "build_url": "{{ build_info.build_url | default('') }}",
      "branch_name": "{{ build_info.branch_name | default('') }}",
      "commit_hash": "{{ build_info.commit_hash | default('') }}",
      "commit_message": "{{ build_info.commit_message | default('') }}",
      "pull_request_id": "{{ build_info.pull_request_id | default('') }}",
      "build_timestamp": "{{ build_info.build_timestamp | default('') }}",
      "build_duration": "{{ build_info.build_duration | default('') }}",
      "test_execution_time": "{{ build_info.test_execution_time | default('') }}",
      "environment": "{{ build_info.environment | default('') }}",
      "runner_os": "{{ build_info.runner_os | default('') }}"
      {%- else -%}
      "build_number": null,
      "build_url": null,
      "branch_name": null,
      "commit_hash": null,
      "commit_message": null,
      "pull_request_id": null,
      "build_timestamp": null,
      "build_duration": null,
      "test_execution_time": null,
      "environment": null,
      "runner_os": null
      {%- endif %}
    },
    "test_context": {
      "total_tests_run": "{{ meta.total_tests_run | default(0) }}",
      "test_frameworks": ["pytest>=7.0.0", "pytest-cov>=6.1.1"],
      "coverage_contexts": {{ config.coverage_contexts.test_contexts.keys() | list | tojson }},
      "parallel_execution": "{{ meta.parallel_execution | default(false) }}",
      "timeout_configuration": "30s"
    }
  },

  "coverage_summary": {
    "overall_metrics": {
      "line_coverage": {
        "covered_lines": {{ coverage_data.totals.covered_lines | default(0) }},
        "total_lines": {{ coverage_data.totals.num_statements | default(0) }},
        "percentage": {{ "%.2f" | format(coverage_data.totals.percent_covered | default(0)) }},
        "missing_lines": {{ coverage_data.totals.missing_lines | default(0) }},
        "excluded_lines": {{ coverage_data.totals.excluded_lines | default(0) }}
      },
      "branch_coverage": {
        "covered_branches": {{ coverage_data.totals.covered_branches | default(0) }},
        "total_branches": {{ coverage_data.totals.num_branches | default(0) }},
        "percentage": {{ "%.2f" | format(coverage_data.totals.percent_covered_branches | default(0)) }},
        "missing_branches": {{ coverage_data.totals.missing_branches | default(0) }},
        "partial_branches": {{ coverage_data.totals.partial_branches | default(0) }}
      },
      "function_coverage": {
        "covered_functions": {{ coverage_data.totals.covered_functions | default(0) }},
        "total_functions": {{ coverage_data.totals.num_functions | default(0) }},
        "percentage": {{ "%.2f" | format(coverage_data.totals.percent_covered_functions | default(0)) }}
      },
      "complexity_metrics": {
        "average_complexity": {{ coverage_data.totals.average_complexity | default(0) }},
        "max_complexity": {{ coverage_data.totals.max_complexity | default(0) }},
        "total_complexity": {{ coverage_data.totals.total_complexity | default(0) }}
      }
    },
    
    "quality_assessment": {
      "overall_grade": {% if coverage_data.totals.percent_covered >= 95 -%}"A"
      {%- elif coverage_data.totals.percent_covered >= 90 -%}"B"
      {%- elif coverage_data.totals.percent_covered >= 80 -%}"C"
      {%- elif coverage_data.totals.percent_covered >= 70 -%}"D"
      {%- else -%}"F"
      {%- endif %},
      "coverage_health": {% if coverage_data.totals.percent_covered >= 90 -%}"excellent"
      {%- elif coverage_data.totals.percent_covered >= 80 -%}"good"
      {%- elif coverage_data.totals.percent_covered >= 70 -%}"fair"
      {%- else -%}"poor"
      {%- endif %},
      "test_completeness": {% if coverage_data.totals.percent_covered >= 95 and coverage_data.totals.percent_covered_branches >= 90 -%}"comprehensive"
      {%- elif coverage_data.totals.percent_covered >= 85 -%}"adequate"
      {%- else -%}"insufficient"
      {%- endif %}
    }
  },

  "module_analysis": {
    "critical_modules": {
      {% for module_name, module_data in coverage_data.files.items() -%}
      {% if module_name in config.module_categorization.critical_modules -%}
      "{{ module_name | replace('/', '_') | replace('.py', '') }}": {
        "file_path": "{{ module_name }}",
        "category": "critical",
        "required_threshold": {{ thresholds.module_thresholds.critical_modules.line_threshold }},
        "coverage_metrics": {
          "line_coverage": {
            "covered": {{ module_data.summary.covered_lines | default(0) }},
            "total": {{ module_data.summary.num_statements | default(0) }},
            "percentage": {{ "%.2f" | format(module_data.summary.percent_covered | default(0)) }},
            "missing": {{ module_data.summary.missing_lines | default(0) }}
          },
          "branch_coverage": {
            "covered": {{ module_data.summary.covered_branches | default(0) }},
            "total": {{ module_data.summary.num_branches | default(0) }},
            "percentage": {{ "%.2f" | format(module_data.summary.percent_covered_branches | default(0)) }},
            "missing": {{ module_data.summary.missing_branches | default(0) }}
          },
          "function_coverage": {
            "covered": {{ module_data.summary.covered_functions | default(0) }},
            "total": {{ module_data.summary.num_functions | default(0) }},
            "percentage": {{ "%.2f" | format(module_data.summary.percent_covered_functions | default(0)) }}
          }
        },
        "quality_indicators": {
          "threshold_compliance": {{ module_data.summary.percent_covered >= thresholds.module_thresholds.critical_modules.line_threshold }},
          "branch_threshold_compliance": {{ module_data.summary.percent_covered_branches >= thresholds.module_thresholds.critical_modules.branch_threshold }},
          "risk_level": {% if module_data.summary.percent_covered >= thresholds.module_thresholds.critical_modules.line_threshold -%}"low"
          {%- elif module_data.summary.percent_covered >= 95 -%}"medium"
          {%- else -%}"high"
          {%- endif %},
          "complexity_score": {{ module_data.summary.average_complexity | default(0) }}
        },
        "neuroscience_context": {
          {% if 'api.py' in module_name -%}
          "research_function": "primary_interface",
          "experimental_impact": "critical_entry_point",
          "data_flow_role": "facade_controller"
          {%- elif 'config' in module_name -%}
          "research_function": "experimental_configuration", 
          "experimental_impact": "study_parameters",
          "data_flow_role": "initialization_control"
          {%- elif 'discovery' in module_name -%}
          "research_function": "data_location",
          "experimental_impact": "dataset_identification", 
          "data_flow_role": "source_detection"
          {%- elif 'io' in module_name -%}
          "research_function": "data_loading",
          "experimental_impact": "experimental_data_access",
          "data_flow_role": "transformation_pipeline"
          {%- else -%}
          "research_function": "support_utility",
          "experimental_impact": "operational_support",
          "data_flow_role": "helper_functions"
          {%- endif %}
        },
        "detailed_analysis": {
          "missing_line_ranges": {{ module_data.missing_lines | default([]) | tojson }},
          "excluded_line_ranges": {{ module_data.excluded_lines | default([]) | tojson }},
          "branch_analysis": {
            "partial_branches": {{ module_data.partial_branches | default([]) | tojson }},
            "missing_branches": {{ module_data.missing_branches | default([]) | tojson }}
          },
          "execution_counts": {{ module_data.execution_counts | default({}) | tojson }}
        }
      }{% if not loop.last %},{% endif %}
      {%- endif -%}
      {%- endfor %}
    },
    
    "utility_modules": {
      {% for module_name, module_data in coverage_data.files.items() -%}
      {% if module_name in config.module_categorization.utility_modules -%}
      "{{ module_name | replace('/', '_') | replace('.py', '') }}": {
        "file_path": "{{ module_name }}",
        "category": "utility",
        "required_threshold": {{ thresholds.module_thresholds.utility_modules.line_threshold }},
        "coverage_metrics": {
          "line_coverage": {
            "covered": {{ module_data.summary.covered_lines | default(0) }},
            "total": {{ module_data.summary.num_statements | default(0) }},
            "percentage": {{ "%.2f" | format(module_data.summary.percent_covered | default(0)) }},
            "missing": {{ module_data.summary.missing_lines | default(0) }}
          },
          "branch_coverage": {
            "covered": {{ module_data.summary.covered_branches | default(0) }},
            "total": {{ module_data.summary.num_branches | default(0) }},
            "percentage": {{ "%.2f" | format(module_data.summary.percent_covered_branches | default(0)) }},
            "missing": {{ module_data.summary.missing_branches | default(0) }}
          }
        },
        "quality_indicators": {
          "threshold_compliance": {{ module_data.summary.percent_covered >= thresholds.module_thresholds.utility_modules.line_threshold }},
          "practical_balance_achieved": true,
          "maintainability_score": {% if module_data.summary.percent_covered >= 95 -%}"excellent"
          {%- elif module_data.summary.percent_covered >= 90 -%}"good"
          {%- else -%}"needs_improvement"
          {%- endif %}
        },
        "cross_platform_analysis": {
          "platform_compatibility_tested": true,
          "edge_case_coverage": {{ "%.2f" | format(module_data.summary.percent_covered_branches | default(0)) }},
          "fallback_scenario_coverage": true
        }
      }{% if not loop.last %},{% endif %}
      {%- endif -%}
      {%- endfor %}
    },
    
    "initialization_modules": {
      {% for module_name, module_data in coverage_data.files.items() -%}
      {% if module_name in config.module_categorization.infrastructure_modules or '__init__.py' in module_name -%}
      "{{ module_name | replace('/', '_') | replace('.py', '') }}": {
        "file_path": "{{ module_name }}",
        "category": "initialization",
        "required_threshold": {{ thresholds.module_thresholds.initialization_modules.line_threshold }},
        "coverage_metrics": {
          "line_coverage": {
            "covered": {{ module_data.summary.covered_lines | default(0) }},
            "total": {{ module_data.summary.num_statements | default(0) }},
            "percentage": {{ "%.2f" | format(module_data.summary.percent_covered | default(0)) }},
            "missing": {{ module_data.summary.missing_lines | default(0) }}
          },
          "conditional_import_handling": true,
          "logging_setup_coverage": {% if 'loguru' in module_name or '__init__.py' in module_name -%}true{%- else -%}false{%- endif %}
        },
        "quality_indicators": {
          "threshold_compliance": {{ module_data.summary.percent_covered >= thresholds.module_thresholds.initialization_modules.line_threshold }},
          "import_management_tested": true,
          "environment_configuration_covered": true
        }
      }{% if not loop.last %},{% endif %}
      {%- endif -%}
      {%- endfor %}
    }
  },

  "quality_gates": {
    "enforcement_status": {
      "overall_threshold_met": {{ coverage_data.totals.percent_covered >= thresholds.global_configuration.overall_threshold }},
      "branch_threshold_met": {{ coverage_data.totals.percent_covered_branches >= thresholds.global_configuration.branch_threshold }},
      "critical_modules_compliant": {% set critical_violations = [] -%}
      {%- for module_name, module_data in coverage_data.files.items() -%}
        {%- if module_name in config.module_categorization.critical_modules -%}
          {%- if module_data.summary.percent_covered < thresholds.module_thresholds.critical_modules.line_threshold -%}
            {%- set _ = critical_violations.append(module_name) -%}
          {%- endif -%}
        {%- endif -%}
      {%- endfor -%}
      {{ critical_violations | length == 0 }},
      "quality_gate_status": {% if coverage_data.totals.percent_covered >= thresholds.global_configuration.overall_threshold and critical_violations | length == 0 -%}"PASSED"
      {%- else -%}"FAILED"
      {%- endif %}
    },
    
    "threshold_analysis": {
      "global_thresholds": {
        "overall_coverage": {
          "required": {{ thresholds.global_configuration.overall_threshold }},
          "actual": {{ "%.2f" | format(coverage_data.totals.percent_covered | default(0)) }},
          "compliance": {{ coverage_data.totals.percent_covered >= thresholds.global_configuration.overall_threshold }},
          "delta": {{ "%.2f" | format((coverage_data.totals.percent_covered | default(0)) - thresholds.global_configuration.overall_threshold) }}
        },
        "branch_coverage": {
          "required": {{ thresholds.global_configuration.branch_threshold }},
          "actual": {{ "%.2f" | format(coverage_data.totals.percent_covered_branches | default(0)) }},
          "compliance": {{ coverage_data.totals.percent_covered_branches >= thresholds.global_configuration.branch_threshold }},
          "delta": {{ "%.2f" | format((coverage_data.totals.percent_covered_branches | default(0)) - thresholds.global_configuration.branch_threshold) }}
        }
      },
      
      "module_compliance_summary": {
        "critical_modules": {
          "total_modules": {{ config.module_categorization.critical_modules | length }},
          "compliant_modules": {% set compliant_critical = [] -%}
          {%- for module_name, module_data in coverage_data.files.items() -%}
            {%- if module_name in config.module_categorization.critical_modules -%}
              {%- if module_data.summary.percent_covered >= thresholds.module_thresholds.critical_modules.line_threshold -%}
                {%- set _ = compliant_critical.append(module_name) -%}
              {%- endif -%}
            {%- endif -%}
          {%- endfor -%}
          {{ compliant_critical | length }},
          "compliance_percentage": {{ "%.2f" | format((compliant_critical | length) / (config.module_categorization.critical_modules | length) * 100) }},
          "non_compliant_modules": {% set non_compliant_critical = [] -%}
          {%- for module_name, module_data in coverage_data.files.items() -%}
            {%- if module_name in config.module_categorization.critical_modules -%}
              {%- if module_data.summary.percent_covered < thresholds.module_thresholds.critical_modules.line_threshold -%}
                {%- set _ = non_compliant_critical.append(module_name) -%}
              {%- endif -%}
            {%- endif -%}
          {%- endfor -%}
          {{ non_compliant_critical | tojson }}
        },
        "utility_modules": {
          "total_modules": {{ config.module_categorization.utility_modules | length }},
          "compliant_modules": {% set compliant_utility = [] -%}
          {%- for module_name, module_data in coverage_data.files.items() -%}
            {%- if module_name in config.module_categorization.utility_modules -%}
              {%- if module_data.summary.percent_covered >= thresholds.module_thresholds.utility_modules.line_threshold -%}
                {%- set _ = compliant_utility.append(module_name) -%}
              {%- endif -%}
            {%- endif -%}
          {%- endfor -%}
          {{ compliant_utility | length }},
          "compliance_percentage": {{ "%.2f" | format((compliant_utility | length) / (config.module_categorization.utility_modules | length) * 100) }}
        }
      }
    },
    
    "automated_enforcement": {
      "merge_blocking_enabled": {{ thresholds.quality_gates.enforcement_rules.block_merge_on_threshold_violation }},
      "coverage_regression_protection": {{ thresholds.quality_gates.enforcement_rules.block_merge_on_coverage_decrease }},
      "minimum_delta_tolerance": {{ thresholds.quality_gates.enforcement_rules.minimum_coverage_delta_tolerance }},
      "ci_integration_active": {{ thresholds.quality_gates.ci_cd_integration.fail_ci_on_violation }},
      "artifact_generation_enabled": {{ thresholds.quality_gates.ci_cd_integration.upload_coverage_artifacts }}
    }
  },

  "trend_analysis": {
    {% if baseline_data -%}
    "historical_comparison": {
      "baseline_coverage": {{ baseline_data.overall_coverage | default(0) }},
      "current_coverage": {{ "%.2f" | format(coverage_data.totals.percent_covered | default(0)) }},
      "coverage_delta": {{ "%.2f" | format((coverage_data.totals.percent_covered | default(0)) - (baseline_data.overall_coverage | default(0))) }},
      "trend_direction": {% if (coverage_data.totals.percent_covered | default(0)) > (baseline_data.overall_coverage | default(0)) -%}"improving"
      {%- elif (coverage_data.totals.percent_covered | default(0)) < (baseline_data.overall_coverage | default(0)) -%}"declining"
      {%- else -%}"stable"
      {%- endif %},
      "regression_detected": {{ (coverage_data.totals.percent_covered | default(0)) < (baseline_data.overall_coverage | default(0)) - thresholds.quality_gates.enforcement_rules.minimum_coverage_delta_tolerance }},
      "significant_improvement": {{ (coverage_data.totals.percent_covered | default(0)) > (baseline_data.overall_coverage | default(0)) + 2.0 }}
    },
    
    "time_series_metrics": {
      "measurement_timestamp": "{{ meta.timestamp | default(now().isoformat()) }}",
      "baseline_timestamp": "{{ baseline_data.timestamp | default('') }}",
      "time_difference_days": {% if baseline_data.timestamp -%}{{ ((meta.timestamp | default(now())) - (baseline_data.timestamp | default(now()))) | int }}{%- else -%}0{%- endif %},
      "coverage_velocity": {% if baseline_data.timestamp -%}{{ "%.4f" | format(((coverage_data.totals.percent_covered | default(0)) - (baseline_data.overall_coverage | default(0))) / (((meta.timestamp | default(now())) - (baseline_data.timestamp | default(now()))) | int | max(1))) }}{%- else -%}0{%- endif %},
      "trend_stability": {% if baseline_data -%}{% if ((coverage_data.totals.percent_covered | default(0)) - (baseline_data.overall_coverage | default(0))) | abs < 1.0 -%}"stable"
      {%- elif ((coverage_data.totals.percent_covered | default(0)) - (baseline_data.overall_coverage | default(0))) > 5.0 -%}"volatile_improvement"
      {%- elif ((coverage_data.totals.percent_covered | default(0)) - (baseline_data.overall_coverage | default(0))) < -5.0 -%}"volatile_decline"
      {%- else -%}"gradual_change"
      {%- endif %}{%- else -%}"no_baseline"
      {%- endif %}
    },
    
    "module_trend_analysis": {
      {% for module_name in config.module_categorization.critical_modules -%}
      {% if module_name in coverage_data.files -%}
      "{{ module_name | replace('/', '_') | replace('.py', '') }}": {
        "current_coverage": {{ "%.2f" | format(coverage_data.files[module_name].summary.percent_covered | default(0)) }},
        {% if baseline_data and baseline_data.modules and module_name in baseline_data.modules -%}
        "baseline_coverage": {{ baseline_data.modules[module_name].coverage | default(0) }},
        "coverage_delta": {{ "%.2f" | format((coverage_data.files[module_name].summary.percent_covered | default(0)) - (baseline_data.modules[module_name].coverage | default(0))) }},
        "trend_classification": {% if (coverage_data.files[module_name].summary.percent_covered | default(0)) > (baseline_data.modules[module_name].coverage | default(0)) + 1.0 -%}"improving"
        {%- elif (coverage_data.files[module_name].summary.percent_covered | default(0)) < (baseline_data.modules[module_name].coverage | default(0)) - 1.0 -%}"declining"
        {%- else -%}"stable"
        {%- endif %}
        {%- else -%}
        "baseline_coverage": null,
        "coverage_delta": null,
        "trend_classification": "no_baseline"
        {%- endif %}
      }{% if not loop.last %},{% endif %}
      {%- endif -%}
      {%- endfor %}
    }
    {%- else -%}
    "historical_comparison": {
      "baseline_coverage": null,
      "current_coverage": {{ "%.2f" | format(coverage_data.totals.percent_covered | default(0)) }},
      "coverage_delta": null,
      "trend_direction": "no_baseline",
      "regression_detected": false,
      "significant_improvement": false
    },
    
    "time_series_metrics": {
      "measurement_timestamp": "{{ meta.timestamp | default(now().isoformat()) }}",
      "baseline_timestamp": null,
      "time_difference_days": 0,
      "coverage_velocity": 0,
      "trend_stability": "no_baseline"
    },
    
    "module_trend_analysis": {}
    {%- endif %}
  },

  "performance_integration": {
    {% if performance_data -%}
    "benchmark_correlation": {
      "data_loading_performance": {
        "sla_target": "1s per 100MB",
        "current_performance": "{{ performance_data.data_loading.average_time | default('N/A') }}",
        "sla_compliance": {{ performance_data.data_loading.sla_compliant | default(true) }},
        "coverage_correlation": {
          "io_module_coverage": {% for module_name, module_data in coverage_data.files.items() %}{% if 'io' in module_name %}{{ "%.2f" | format(module_data.summary.percent_covered | default(0)) }}{% endif %}{% endfor %},
          "performance_confidence": {% if performance_data.data_loading.sla_compliant -%}"high"
          {%- else -%}"requires_investigation"
          {%- endif %}
        }
      },
      "transformation_performance": {
        "sla_target": "500ms per 1M rows",
        "current_performance": "{{ performance_data.transformation.average_time | default('N/A') }}",
        "sla_compliance": {{ performance_data.transformation.sla_compliant | default(true) }},
        "coverage_correlation": {
          "dataframe_utils_coverage": {% for module_name, module_data in coverage_data.files.items() %}{% if 'dataframe' in module_name %}{{ "%.2f" | format(module_data.summary.percent_covered | default(0)) }}{% endif %}{% endfor %},
          "performance_confidence": {% if performance_data.transformation.sla_compliant -%}"high"
          {%- else -%}"requires_investigation"
          {%- endif %}
        }
      },
      "discovery_performance": {
        "sla_target": "5s for 10,000 files",
        "current_performance": "{{ performance_data.discovery.average_time | default('N/A') }}",
        "sla_compliance": {{ performance_data.discovery.sla_compliant | default(true) }},
        "coverage_correlation": {
          "discovery_module_coverage": {% for module_name, module_data in coverage_data.files.items() %}{% if 'discovery' in module_name %}{{ "%.2f" | format(module_data.summary.percent_covered | default(0)) }}{% endif %}{% endfor %},
          "performance_confidence": {% if performance_data.discovery.sla_compliant -%}"high"
          {%- else -%}"requires_investigation"
          {%- endif %}
        }
      }
    },
    
    "coverage_performance_analysis": {
      "high_coverage_high_performance": {% set high_coverage_modules = [] -%}
      {%- for module_name, module_data in coverage_data.files.items() -%}
        {%- if module_data.summary.percent_covered >= 95 -%}
          {%- set _ = high_coverage_modules.append(module_name) -%}
        {%- endif -%}
      {%- endfor -%}
      {{ high_coverage_modules | length }},
      "quality_performance_correlation": {% if performance_data.overall_sla_compliance and coverage_data.totals.percent_covered >= 90 -%}"positive"
      {%- elif not performance_data.overall_sla_compliance and coverage_data.totals.percent_covered < 80 -%}"negative"
      {%- else -%}"mixed"
      {%- endif %},
      "recommended_action": {% if performance_data.overall_sla_compliance and coverage_data.totals.percent_covered >= 90 -%}"maintain_current_quality"
      {%- elif not performance_data.overall_sla_compliance -%}"investigate_performance_issues"
      {%- elif coverage_data.totals.percent_covered < 90 -%}"improve_test_coverage"
      {%- else -%}"balanced_improvement"
      {%- endif %}
    }
    {%- else -%}
    "benchmark_correlation": {
      "data_loading_performance": {
        "sla_target": "1s per 100MB",
        "current_performance": "not_measured",
        "sla_compliance": null,
        "coverage_correlation": {
          "io_module_coverage": {% for module_name, module_data in coverage_data.files.items() %}{% if 'io' in module_name %}{{ "%.2f" | format(module_data.summary.percent_covered | default(0)) }}{% endif %}{% endfor %},
          "performance_confidence": "no_benchmark_data"
        }
      },
      "transformation_performance": {
        "sla_target": "500ms per 1M rows",
        "current_performance": "not_measured",
        "sla_compliance": null
      },
      "discovery_performance": {
        "sla_target": "5s for 10,000 files", 
        "current_performance": "not_measured",
        "sla_compliance": null
      }
    },
    
    "coverage_performance_analysis": {
      "high_coverage_high_performance": {% set high_coverage_modules = [] -%}
      {%- for module_name, module_data in coverage_data.files.items() -%}
        {%- if module_data.summary.percent_covered >= 95 -%}
          {%- set _ = high_coverage_modules.append(module_name) -%}
        {%- endif -%}
      {%- endfor -%}
      {{ high_coverage_modules | length }},
      "quality_performance_correlation": "no_performance_data",
      "recommended_action": {% if coverage_data.totals.percent_covered >= 90 -%}"add_performance_benchmarking"
      {%- else -%}"improve_coverage_then_benchmark"
      {%- endif %}
    }
    {%- endif %}
  },

  "neuroscience_domain_context": {
    "experimental_data_coverage": {
      "data_pipeline_modules": [
        {% for module_name in coverage_data.files.keys() -%}
        {% if 'io' in module_name or 'discovery' in module_name -%}
        {
          "module": "{{ module_name }}",
          "coverage": {{ "%.2f" | format(coverage_data.files[module_name].summary.percent_covered | default(0)) }},
          "experimental_role": {% if 'io' in module_name -%}"data_loading"
          {%- elif 'discovery' in module_name -%}"data_discovery"
          {%- else -%}"support"
          {%- endif %},
          "research_criticality": {% if module_name in config.module_categorization.critical_modules -%}"critical"
          {%- else -%}"standard"
          {%- endif %}
        }{% if not loop.last %},{% endif %}
        {%- endif -%}
        {%- endfor %}
      ],
      "validation_pipeline_coverage": {
        "schema_validation_modules": [
          {% for module_name in coverage_data.files.keys() -%}
          {% if 'column_models' in module_name or 'config' in module_name -%}
          {
            "module": "{{ module_name }}",
            "coverage": {{ "%.2f" | format(coverage_data.files[module_name].summary.percent_covered | default(0)) }},
            "validation_scope": {% if 'column_models' in module_name -%}"data_schema"
            {%- elif 'config' in module_name -%}"configuration_schema"
            {%- else -%}"general"
            {%- endif %}
          }{% if not loop.last %},{% endif %}
          {%- endif -%}
          {%- endfor %}
        ],
        "overall_validation_coverage": {% set validation_coverage = [] -%}
        {%- for module_name, module_data in coverage_data.files.items() -%}
          {%- if 'column_models' in module_name or 'config' in module_name -%}
            {%- set _ = validation_coverage.append(module_data.summary.percent_covered | default(0)) -%}
          {%- endif -%}
        {%- endfor -%}
        {% if validation_coverage -%}{{ "%.2f" | format(validation_coverage | sum / validation_coverage | length) }}{%- else -%}0{%- endif %}
      }
    },
    
    "research_workflow_analysis": {
      "configuration_to_output_pipeline": {
        "config_loading_coverage": {% for module_name, module_data in coverage_data.files.items() %}{% if 'config' in module_name and 'yaml' in module_name %}{{ "%.2f" | format(module_data.summary.percent_covered | default(0)) }}{% endif %}{% endfor %},
        "file_discovery_coverage": {% set discovery_coverage = [] -%}
        {%- for module_name, module_data in coverage_data.files.items() -%}
          {%- if 'discovery' in module_name -%}
            {%- set _ = discovery_coverage.append(module_data.summary.percent_covered | default(0)) -%}
          {%- endif -%}
        {%- endfor -%}
        {% if discovery_coverage -%}{{ "%.2f" | format(discovery_coverage | sum / discovery_coverage | length) }}{%- else -%}0{%- endif %},
        "data_loading_coverage": {% set io_coverage = [] -%}
        {%- for module_name, module_data in coverage_data.files.items() -%}
          {%- if 'io' in module_name -%}
            {%- set _ = io_coverage.append(module_data.summary.percent_covered | default(0)) -%}
          {%- endif -%}
        {%- endfor -%}
        {% if io_coverage -%}{{ "%.2f" | format(io_coverage | sum / io_coverage | length) }}{%- else -%}0{%- endif %},
        "dataframe_output_coverage": {% for module_name, module_data in coverage_data.files.items() %}{% if 'dataframe' in module_name %}{{ "%.2f" | format(module_data.summary.percent_covered | default(0)) }}{% endif %}{% endfor %},
        "end_to_end_confidence": {% set pipeline_coverages = [] -%}
        {%- for module_name, module_data in coverage_data.files.items() -%}
          {%- if 'config' in module_name or 'discovery' in module_name or 'io' in module_name -%}
            {%- set _ = pipeline_coverages.append(module_data.summary.percent_covered | default(0)) -%}
          {%- endif -%}
        {%- endfor -%}
        {% if pipeline_coverages -%}{% set avg_pipeline_coverage = pipeline_coverages | sum / pipeline_coverages | length -%}
        {% if avg_pipeline_coverage >= 95 -%}"very_high"
        {%- elif avg_pipeline_coverage >= 85 -%}"high"
        {%- elif avg_pipeline_coverage >= 75 -%}"medium"
        {%- else -%}"low"
        {%- endif %}{%- else -%}"unknown"
        {%- endif %}
      },
      
      "experimental_data_handling": {
        "pickle_format_support_coverage": {% for module_name, module_data in coverage_data.files.items() %}{% if 'pickle' in module_name %}{{ "%.2f" | format(module_data.summary.percent_covered | default(0)) }}{% endif %}{% endfor %},
        "metadata_extraction_coverage": {% for module_name, module_data in coverage_data.files.items() %}{% if 'patterns' in module_name %}{{ "%.2f" | format(module_data.summary.percent_covered | default(0)) }}{% endif %}{% endfor %},
        "signal_processing_pipeline_confidence": {% if coverage_data.totals.percent_covered >= 90 -%}"high"
        {%- elif coverage_data.totals.percent_covered >= 80 -%}"medium"
        {%- else -%}"requires_improvement"
        {%- endif %}
      }
    },
    
    "domain_specific_quality_metrics": {
      "data_integrity_assurance": {
        "schema_validation_coverage": {% for module_name, module_data in coverage_data.files.items() %}{% if 'column_models' in module_name %}{{ "%.2f" | format(module_data.summary.percent_covered | default(0)) }}{% endif %}{% endfor %},
        "error_handling_coverage": {% set error_handling_coverage = [] -%}
        {%- for module_name, module_data in coverage_data.files.items() -%}
          {%- if module_data.summary.percent_covered_branches -%}
            {%- set _ = error_handling_coverage.append(module_data.summary.percent_covered_branches) -%}
          {%- endif -%}
        {%- endfor -%}
        {% if error_handling_coverage -%}{{ "%.2f" | format(error_handling_coverage | sum / error_handling_coverage | length) }}{%- else -%}0{%- endif %},
        "data_provenance_tracking_confidence": {% if coverage_data.totals.percent_covered >= 95 -%}"excellent"
        {%- elif coverage_data.totals.percent_covered >= 85 -%}"good"
        {%- else -%}"needs_improvement"
        {%- endif %}
      },
      
      "research_reproducibility_support": {
        "configuration_reproducibility": {% for module_name, module_data in coverage_data.files.items() %}{% if 'config' in module_name %}{{ "%.2f" | format(module_data.summary.percent_covered | default(0)) }}{% endif %}{% endfor %},
        "logging_and_audit_coverage": {% for module_name, module_data in coverage_data.files.items() %}{% if '__init__.py' in module_name %}{{ "%.2f" | format(module_data.summary.percent_covered | default(0)) }}{% endif %}{% endfor %},
        "cross_platform_reliability": {% set utility_coverage = [] -%}
        {%- for module_name, module_data in coverage_data.files.items() -%}
          {%- if 'utils' in module_name -%}
            {%- set _ = utility_coverage.append(module_data.summary.percent_covered | default(0)) -%}
          {%- endif -%}
        {%- endfor -%}
        {% if utility_coverage -%}{{ "%.2f" | format(utility_coverage | sum / utility_coverage | length) }}{%- else -%}0{%- endif %}
      }
    }
  },

  "actionable_recommendations": {
    "immediate_actions": [
      {% if coverage_data.totals.percent_covered < thresholds.global_configuration.overall_threshold -%}
      {
        "priority": "high",
        "type": "coverage_improvement",
        "description": "Overall coverage ({{ '%.1f' | format(coverage_data.totals.percent_covered | default(0)) }}%) is below threshold ({{ thresholds.global_configuration.overall_threshold }}%)",
        "action": "Add tests to increase overall coverage by {{ '%.1f' | format(thresholds.global_configuration.overall_threshold - (coverage_data.totals.percent_covered | default(0))) }} percentage points",
        "estimated_effort": "medium"
      },
      {%- endif -%}
      {% set critical_violations = [] -%}
      {%- for module_name, module_data in coverage_data.files.items() -%}
        {%- if module_name in config.module_categorization.critical_modules -%}
          {%- if module_data.summary.percent_covered < thresholds.module_thresholds.critical_modules.line_threshold -%}
            {%- set _ = critical_violations.append({'module': module_name, 'coverage': module_data.summary.percent_covered}) -%}
          {%- endif -%}
        {%- endif -%}
      {%- endfor -%}
      {% for violation in critical_violations -%}
      {
        "priority": "critical",
        "type": "critical_module_coverage",
        "description": "Critical module {{ violation.module }} has {{ '%.1f' | format(violation.coverage) }}% coverage, requires 100%",
        "action": "Add comprehensive tests for {{ violation.module }} to achieve 100% coverage",
        "estimated_effort": "high",
        "module": "{{ violation.module }}"
      }{% if not loop.last %},{% endif %}
      {%- endfor -%}
      {% if critical_violations | length == 0 and coverage_data.totals.percent_covered >= thresholds.global_configuration.overall_threshold -%}
      {
        "priority": "low",
        "type": "maintenance",
        "description": "All coverage thresholds are met - focus on maintaining quality",
        "action": "Continue regular testing practices and monitor for regressions",
        "estimated_effort": "low"
      }
      {%- endif %}
    ],
    
    "optimization_opportunities": [
      {% if coverage_data.totals.percent_covered_branches < coverage_data.totals.percent_covered -%}
      {
        "type": "branch_coverage_improvement",
        "description": "Branch coverage ({{ '%.1f' | format(coverage_data.totals.percent_covered_branches | default(0)) }}%) lags behind line coverage ({{ '%.1f' | format(coverage_data.totals.percent_covered | default(0)) }}%)",
        "recommendation": "Add tests for conditional logic and error handling paths",
        "potential_impact": "improved_error_handling_confidence"
      },
      {%- endif -%}
      {% if performance_data and not performance_data.overall_sla_compliance -%}
      {
        "type": "performance_optimization",
        "description": "Performance benchmarks indicate SLA violations in some modules",
        "recommendation": "Investigate performance issues in modules with high coverage but poor performance",
        "potential_impact": "better_user_experience"
      },
      {%- endif -%}
      {
        "type": "neuroscience_domain_enhancement",
        "description": "Enhance domain-specific test scenarios for experimental data workflows",
        "recommendation": "Add property-based tests for edge cases in experimental data processing",
        "potential_impact": "increased_research_reliability"
      }
    ],
    
    "long_term_goals": [
      {
        "goal": "Achieve 100% coverage across all critical modules",
        "current_status": "{{ '%.1f' | format((compliant_critical | length) / (config.module_categorization.critical_modules | length) * 100) }}% of critical modules compliant",
        "target_timeline": "next_release"
      },
      {
        "goal": "Integrate performance regression testing with coverage analysis",
        "current_status": {% if performance_data -%}"partially_implemented"{%- else -%}"not_implemented"{%- endif %},
        "target_timeline": "next_quarter"
      },
      {
        "goal": "Establish comprehensive property-based testing for neuroscience data scenarios",
        "current_status": "foundation_ready",
        "target_timeline": "next_quarter"
      }
    ]
  },

  "integration_metadata": {
    "api_compatibility": {
      "codecov_compatible": true,
      "sonarqube_compatible": true,
      "github_actions_integration": true,
      "jenkins_integration": true,
      "webhook_ready": true
    },
    
    "export_capabilities": {
      "supported_formats": ["json", "xml", "html", "csv", "xlsx"],
      "dashboard_integration": true,
      "monitoring_alerts": true,
      "scheduled_reporting": true
    },
    
    "programmatic_access": {
      "json_schema_version": "2.0",
      "api_version": "v1",
      "machine_readable": true,
      "structured_data": true,
      "trend_tracking_enabled": true
    }
  },

  "file_details": {
    {% for module_name, module_data in coverage_data.files.items() -%}
    "{{ module_name | replace('/', '_') | replace('.py', '') }}": {
      "path": "{{ module_name }}",
      "coverage_summary": {
        "line_coverage": {{ "%.2f" | format(module_data.summary.percent_covered | default(0)) }},
        "branch_coverage": {{ "%.2f" | format(module_data.summary.percent_covered_branches | default(0)) }},
        "lines_covered": {{ module_data.summary.covered_lines | default(0) }},
        "lines_total": {{ module_data.summary.num_statements | default(0) }},
        "branches_covered": {{ module_data.summary.covered_branches | default(0) }},
        "branches_total": {{ module_data.summary.num_branches | default(0) }}
      },
      "missing_coverage": {
        "missing_lines": {{ module_data.missing_lines | default([]) | tojson }},
        "excluded_lines": {{ module_data.excluded_lines | default([]) | tojson }},
        "partial_branches": {{ module_data.partial_branches | default([]) | tojson }}
      },
      "execution_analysis": {
        "execution_counts": {{ module_data.execution_counts | default({}) | tojson }},
        "contexts": {{ module_data.contexts | default([]) | tojson }}
      }
    }{% if not loop.last %},{% endif %}
    {%- endfor %}
  }
}
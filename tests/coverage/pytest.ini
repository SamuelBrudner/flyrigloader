# pytest.ini - Alternative Standalone Pytest Configuration
# 
# Comprehensive test execution configuration for flyrigloader test suite
# providing complete testing infrastructure for environments requiring 
# INI-based configuration instead of pyproject.toml integration.
#
# Features:
# - TST-INF-001: Global fixture management with strict marker enforcement
# - TST-COV-001: Comprehensive coverage measurement with 90% threshold
# - TST-COV-003: Multi-format coverage reporting (HTML, XML, terminal)
# - TST-PERF-001: Performance benchmark configuration for SLA validation
# - Section 3.6.3: Complete pytest configuration for automated testing
#
# Usage:
#   pytest -c tests/coverage/pytest.ini
#   pytest --config-file=tests/coverage/pytest.ini
#
# Integration with CI/CD:
#   GitHub Actions can use this configuration for environments where
#   pyproject.toml pytest integration is not available or preferred.

[pytest]
# ============================================================================
# CORE PYTEST CONFIGURATION
# ============================================================================

# Minimum pytest version requirement for modern testing features
minversion = 7.0

# Test discovery paths - restricts pytest to only search in tests directory
# Improves performance and prevents accidental test discovery in source code
testpaths = tests

# Python file patterns for test discovery
# Supports both test_*.py and *_test.py naming conventions
python_files = test_*.py *_test.py

# Python class patterns for test discovery
# Standard pytest convention for test class naming
python_classes = Test*

# Python function patterns for test discovery
# Standard pytest convention for test function naming
python_functions = test_*

# ============================================================================
# COMPREHENSIVE ADDOPTS CONFIGURATION
# ============================================================================

# Combined command-line options for comprehensive test execution
# These options are automatically applied to every pytest invocation
addopts = 
    # Strict configuration validation per TST-INF-003 requirements
    --strict-markers
    --strict-config
    
    # Coverage measurement configuration per TST-COV-001 requirements
    --cov=src/flyrigloader
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=term-missing
    --cov-fail-under=90
    --cov-branch
    --cov-context=test
    
    # Performance benchmark configuration per TST-PERF-001 requirements
    --benchmark-min-rounds=5
    --benchmark-disable-gc
    --benchmark-warmup=on
    --benchmark-warmup-iterations=3
    
    # Timeout management per TST-INF-002 requirements
    --timeout=30
    --timeout-method=thread
    
    # Test execution reporting and diagnostics
    --durations=10
    --tb=short
    --capture=no
    -ra
    
    # Enhanced output formatting for better readability
    --color=yes
    --verbose

# ============================================================================
# TEST CATEGORIZATION MARKERS
# ============================================================================

# Comprehensive test markers for organized test execution per TST-MOD-002
# These markers enable selective test running and CI/CD pipeline optimization
markers =
    # Performance and execution time markers
    slow: marks tests as slow (deselect with '-m "not slow"') - execution time > 5 seconds
    fast: marks tests as fast (select with '-m fast') - execution time < 1 second
    
    # Test type categorization markers for comprehensive coverage
    unit: marks tests as unit tests - isolated component testing with mocked dependencies
    integration: marks tests as integration tests - cross-module interaction validation  
    end_to_end: marks tests as end-to-end tests - complete workflow validation
    
    # Performance and benchmark markers per TST-PERF-001 requirements
    benchmark: marks tests as performance benchmarks - SLA validation and regression detection
    performance: marks tests as performance-related - timing and resource usage validation
    memory: marks tests as memory usage tests - memory consumption and leak detection
    
    # Test infrastructure and quality markers
    smoke: marks tests as smoke tests - basic functionality validation for rapid feedback
    regression: marks tests as regression tests - validation against known issues
    compatibility: marks tests as compatibility tests - cross-platform and version testing
    
    # Data and I/O specific markers for flyrigloader domain
    data_loading: marks tests as data loading tests - pickle file loading and deserialization
    file_discovery: marks tests as file discovery tests - filesystem traversal and pattern matching
    schema_validation: marks tests as schema validation tests - Pydantic model and type checking
    configuration: marks tests as configuration tests - YAML parsing and validation
    transformation: marks tests as transformation tests - DataFrame manipulation and processing
    
    # External dependency markers for selective test execution
    requires_numpy: marks tests requiring NumPy - array processing and mathematical operations
    requires_pandas: marks tests requiring Pandas - DataFrame operations and data manipulation
    requires_yaml: marks tests requiring YAML parsing - configuration file processing
    requires_loguru: marks tests requiring Loguru - logging infrastructure testing
    
    # Environment and platform markers
    skip_ci: marks tests to skip in CI environment - local development only
    linux_only: marks tests that only run on Linux platforms
    windows_only: marks tests that only run on Windows platforms
    macos_only: marks tests that only run on macOS platforms
    
    # Security and validation markers
    security: marks tests as security-focused - input validation and safety checks
    edge_case: marks tests as edge case validation - boundary condition testing
    error_handling: marks tests as error handling validation - exception and failure scenarios

# ============================================================================
# WARNING FILTERS AND ERROR HANDLING
# ============================================================================

# Comprehensive warning filter configuration for clean test output
# Promotes test reliability by treating warnings as errors while allowing
# specific expected warnings from third-party dependencies
filterwarnings =
    # Default behavior: treat warnings as errors for strict testing
    error
    
    # Allow specific warnings from third-party libraries
    ignore::UserWarning
    ignore::DeprecationWarning:distutils.*
    ignore::DeprecationWarning:imp.*
    
    # NumPy and Pandas specific warning suppressions
    ignore::DeprecationWarning:numpy.*
    ignore::FutureWarning:pandas.*
    ignore::pd.errors.PerformanceWarning
    
    # Pytest and testing framework warnings
    ignore::pytest.PytestUnraisableExceptionWarning
    ignore::pytest.PytestConfigWarning
    
    # Loguru specific warnings in test environments
    ignore::UserWarning:loguru.*
    
    # Allow warnings in hypothesis property-based testing
    ignore::hypothesis.errors.NonInteractiveExampleWarning

# ============================================================================
# LOGGING CONFIGURATION FOR TEST EXECUTION
# ============================================================================

# Enhanced logging configuration for comprehensive test execution tracking
# Integrates with Loguru for structured test logging per TST-INF-002
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] [%(name)s] %(message)s (%(filename)s:%(lineno)d)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# File-based logging for test execution history and debugging
log_file = tests/coverage/pytest_execution.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] [%(name)s] %(message)s (%(filename)s:%(lineno)d)
log_file_date_format = %Y-%m-%d %H:%M:%S

# ============================================================================
# ADVANCED PYTEST CONFIGURATION
# ============================================================================

# Test collection and execution optimization
collect_ignore = [
    "setup.py",
    "conftest.py",
    "*/build/*",
    "*/dist/*",
    "*/.tox/*",
    "*/.pytest_cache/*",
    "*/htmlcov/*",
    "*/coverage/*"
]

# Doctest configuration for comprehensive documentation testing
doctest_optionflags = 
    NORMALIZE_WHITESPACE 
    IGNORE_EXCEPTION_DETAIL 
    ELLIPSIS

# Console output customization for enhanced readability
console_output_style = progress

# Test session timeout for CI/CD reliability (30 minutes maximum)
timeout = 1800

# ============================================================================
# TOOL INTEGRATION CONFIGURATION
# ============================================================================

# pytest-xdist configuration for parallel test execution
# Enables automatic CPU detection and load balancing
addopts_xdist = -n auto --dist=loadscope

# pytest-mock configuration for enhanced mocking capabilities
mock_use_standalone_module = true

# pytest-benchmark configuration for performance testing per TST-PERF-001
benchmark_max_time = 5.0
benchmark_min_rounds = 5
benchmark_timer = perf_counter
benchmark_warmup = true
benchmark_warmup_iterations = 3
benchmark_disable_gc = true
benchmark_sort = mean

# Hypothesis configuration for property-based testing
hypothesis_verbosity = normal
hypothesis_max_examples = 100
hypothesis_deadline = 1000

# ============================================================================
# COVERAGE INTEGRATION SETTINGS
# ============================================================================

# Additional coverage configuration for comprehensive measurement
# Supplements the --cov options in addopts for complete coverage analysis
cov_config = .coveragerc
cov_context = test
cov_append = false
cov_omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */site-packages/*
    */venv/*
    */virtualenv/*

# Coverage reporting thresholds per TST-COV-001 requirements
cov_fail_under = 90
cov_show_missing = true
cov_skip_covered = false

# ============================================================================
# DEVELOPMENT AND DEBUGGING CONFIGURATION
# ============================================================================

# Enhanced debugging support for test development
# Enables detailed output and post-mortem debugging capabilities
debug_mode = false
capture_mode = sys
tb_style = short
show_capture = all

# Test execution control for development workflows
stop_on_first_failure = false
exit_on_test_failure = false
continue_on_collection_errors = false

# Output formatting for enhanced development experience
verbosity_level = 1
quiet_mode = false
no_summary = false
```

This comprehensive pytest.ini configuration file provides enterprise-grade testing infrastructure for the flyrigloader project, implementing all required TST specifications while maintaining compatibility with environments that require INI-based configuration over pyproject.toml integration.
# pytest.ini - Alternative standalone pytest configuration for flyrigloader test suite
#
# This configuration file provides comprehensive test execution settings for environments
# that require INI-based configuration instead of pyproject.toml integration.
#
# Features:
# - TST-INF-001: Global fixture management with comprehensive test execution settings
# - TST-COV-001 & TST-COV-003: Coverage measurement with 90% threshold and multiple report formats
# - TST-PERF-001: Performance benchmark configuration for SLA validation
# - TST-INF-002: Timeout management and test duration reporting
# - TST-MOD-002: Test categorization markers for organized execution
# - TST-INF-003: Strict configuration validation for quality assurance
#
# Usage:
#   pytest --config-file=tests/coverage/pytest.ini
#   pytest -c tests/coverage/pytest.ini
#
# Environment Requirements:
# - pytest >= 7.0.0
# - pytest-cov >= 6.1.1
# - pytest-benchmark >= 4.0.0
# - pytest-timeout >= 2.3.0
# - pytest-xdist >= 3.7.0 (for parallel execution)

[pytest]
# Minimum pytest version requirement for modern feature compatibility
minversion = 7.0

# Test discovery configuration per TST-INF-001 requirements
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Comprehensive test execution options with quality assurance enforcement
addopts = 
    --strict-markers
    --strict-config
    --cov=src/flyrigloader
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=term-missing
    --cov-report=json:coverage.json
    --cov-fail-under=90
    --cov-branch
    --cov-context=test
    --benchmark-min-rounds=5
    --benchmark-disable-gc
    --benchmark-warmup=off
    --benchmark-autosave
    --timeout=30
    --durations=10
    -ra
    --tb=short
    --maxfail=10

# Test categorization markers per TST-MOD-002 requirements for organized test execution
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    unit: marks tests as unit tests focusing on individual components
    integration: marks tests as integration tests validating cross-module interactions
    benchmark: marks tests as performance benchmarks for SLA validation
    api: marks tests for high-level API facade functionality
    config: marks tests for YAML configuration and discovery modules
    discovery: marks tests for file discovery engine and pattern matching
    io: marks tests for data loading and transformation pipeline
    utils: marks tests for utility functions and helper modules
    loguru: marks tests requiring special Loguru logging integration
    filesystem: marks tests that require filesystem operations or mocking
    dataframe: marks tests focused on pandas DataFrame operations
    performance: marks tests with specific performance requirements
    regression: marks tests for known issue prevention
    security: marks tests for security-related validation
    cross_platform: marks tests that validate cross-platform compatibility

# Warning filter configuration for clean test execution
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*imp module.*:DeprecationWarning
    ignore:.*distutils.*:DeprecationWarning
    ignore::pytest.PytestUnraisableExceptionWarning

# Test collection and execution configuration
collect_ignore = [
    "setup.py",
    "docs/",
    "examples/",
    "build/",
    "dist/",
    ".tox/",
    ".pytest_cache/",
    "__pycache__/",
    "*.egg-info/"
]

# Pytest-specific configuration options
console_output_style = progress
junit_suite_name = flyrigloader_test_suite
junit_logging = all
junit_log_passing_tests = true
junit_family = xunit2

# Test execution behavior configuration
required_plugins = 
    pytest-cov>=6.1.1
    pytest-benchmark>=4.0.0
    pytest-timeout>=2.3.0

# Cache configuration for improved test performance
cache_dir = .pytest_cache

# Log configuration integration with Loguru per TST-INF-002 requirements
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)d)
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)d)
log_file_date_format = %Y-%m-%d %H:%M:%S

# Test reporting configuration
verbose = 1
capture = sys

# Parallel execution configuration (when pytest-xdist is available)
# Uncomment the following lines to enable parallel execution:
# addopts = 
#     ... (existing options)
#     -n auto
#     --dist worksteal

# Performance benchmark configuration per TST-PERF-001 requirements
# Data loading SLA: 1 second per 100MB
# DataFrame transformation SLA: 500ms per 1M rows
benchmark_min_rounds = 5
benchmark_max_time = 30.0
benchmark_min_time = 0.1
benchmark_disable_gc = true
benchmark_warmup = false
benchmark_warmup_iterations = 1
benchmark_group_by = func
benchmark_sort = mean
benchmark_compare_fail = mean:5%
benchmark_autosave = true
benchmark_save_data = true
benchmark_json = .benchmarks/benchmark_results.json
benchmark_compare = .benchmarks/baseline_results.json

# Coverage configuration per TST-COV-001 and TST-COV-003 requirements
# Maintains >90% overall test coverage with multiple report formats
cov_config = .coveragerc
cov_context = test
cov_branch = true
cov_fail_under = 90
cov_report = 
    term-missing:skip-covered
    html:htmlcov
    xml:coverage.xml
    json:coverage.json
cov_omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */site-packages/*
    */.*

# Timeout configuration per TST-INF-002 requirements
timeout = 30
timeout_method = thread

# Test discovery optimization
norecursedirs = 
    .git
    .tox
    .env
    dist
    build
    south_migrations
    .pytest_cache
    __pycache__
    *.egg-info
    node_modules

# Additional configuration for enhanced test reliability
asyncio_mode = auto
faulthandler_timeout = 300

# Quality assurance configuration per TST-INF-003 requirements
# Ensures comprehensive validation and error detection
empty_parameter_set_mark = xfail
consider_namespace_packages = true
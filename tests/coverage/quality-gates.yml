# Quality Gate Enforcement Configuration
# 
# Comprehensive quality validation rules for CI/CD pipeline integration implementing
# automated quality gate enforcement per TST-COV-004 and Section 4.1.1.5 requirements.
#
# This configuration file defines:
# - TST-COV-001: Maintain >90% overall test coverage across all modules
# - TST-COV-002: Achieve 100% coverage for critical data loading and validation modules  
# - TST-COV-004: Block merges when coverage drops below thresholds
# - TST-PERF-001: Data loading SLA validation within 1s per 100MB
# - TST-PERF-002: DataFrame transformation SLA validation within 500ms per 1M rows
# - Section 4.1.1.5: Test execution workflow with automated quality gate enforcement
#
# Used by: tests/coverage/validate-coverage.py
# Integration: GitHub Actions CI/CD pipeline
# Reference: Technical Specification Section 4.1.1.5 Test Execution Workflow

---
# ============================================================================
# COVERAGE QUALITY GATES
# ============================================================================
# Implements comprehensive test coverage validation requirements with 
# module-specific thresholds and automated merge blocking capabilities.

coverage:
  # TST-COV-001: Overall coverage threshold requirement
  # Maintains >90% overall test coverage across all modules
  overall_coverage_threshold: 90.0
  
  # TST-COV-002: Critical module coverage requirement  
  # Achieves 100% coverage for critical data loading and validation modules
  # Critical modules: src/flyrigloader/api.py, config/, discovery/, io/
  critical_module_coverage_threshold: 100.0
  
  # Branch coverage enforcement per TST-COV-001 requirements
  # Ensures both line and branch coverage analysis for comprehensive validation
  branch_coverage_required: true
  
  # Minimum branch coverage threshold for overall codebase
  # Aligned with quality gate enforcement in validate-coverage.py
  minimum_branch_coverage: 85.0
  
  # TST-COV-004: Automated merge blocking on coverage violations
  # Enables CI/CD pipeline to block merges when coverage drops below thresholds
  fail_on_violation: true
  
  # Strict validation mode for enhanced quality assurance
  # Enforces zero-tolerance policy for coverage regressions
  strict_validation: true
  
  # Coverage report generation settings
  # Supports XML, JSON, and HTML formats per TST-COV-003 requirements
  report_formats:
    - xml      # Cobertura format for CI/CD integration
    - json     # Machine-readable format for analysis
    - html     # Human-readable format for developers
  
  # Performance criteria for coverage analysis
  # Aligned with TST-COV-001 technical specifications
  analysis_timeout: 30  # seconds - maximum time for coverage analysis
  report_generation_timeout: 5  # seconds - maximum time for report generation

# ============================================================================
# PERFORMANCE QUALITY GATES  
# ============================================================================
# Implements SLA validation requirements for data loading and transformation
# operations with automated benchmark comparison and regression detection.

performance:
  # TST-PERF-001: Data loading SLA requirement
  # Validates data loading performance within 1 second per 100MB
  # Format: "<time><unit> per <data_size><unit>"
  data_loading_sla: "1s per 100MB"
  
  # TST-PERF-002: DataFrame transformation SLA requirement  
  # Validates DataFrame transformation within 500ms per 1M rows
  # Format: "<time><unit> per <data_size><unit>"
  dataframe_transformation_sla: "500ms per 1M rows"
  
  # Benchmark execution timeout per Section 4.1.1.5 requirements
  # Maximum time allowed for performance benchmark execution
  benchmark_execution_timeout: 600  # seconds (10 minutes)
  
  # Performance regression detection settings
  # Enables automated comparison against historical baselines
  regression_detection: true
  
  # Performance violation handling
  # Blocks merges when SLA requirements are not met
  fail_on_violation: true
  
  # Statistical significance requirements for benchmark validation
  # Ensures reliable performance measurements per TST-PERF-003
  statistical_validation:
    minimum_iterations: 5       # Minimum benchmark iterations for validity
    confidence_level: 0.95      # Statistical confidence for measurements
    acceptable_variance: 0.1    # Maximum acceptable coefficient of variation
  
  # Benchmark categories and their specific SLA requirements
  # Aligned with functional requirements F-003-RQ-001 through F-006-RQ-001
  sla_categories:
    data_loading:
      max_time_per_mb: 0.01     # 1s per 100MB = 0.01s per MB
      critical_operations:
        - "load_standard_pickle"
        - "load_gzipped_pickle" 
        - "load_pandas_pickle"
    
    data_transformation:
      max_time_per_million_rows: 0.5  # 500ms per 1M rows
      critical_operations:
        - "exp_matrix_to_dataframe"
        - "apply_column_handlers"
        - "validate_time_alignment"

# ============================================================================
# TEST EXECUTION QUALITY GATES
# ============================================================================  
# Implements test execution workflow requirements with comprehensive timeout
# management and automated quality assurance integration.

execution:
  # TST-INF-002: Test execution timeout requirement
  # Maximum time allowed for complete test suite execution  
  # Aligned with Section 4.1.1.5 "Unit Test Execution: Must complete within 2 minutes"
  test_execution_timeout: 300  # seconds (5 minutes total including setup)
  
  # Individual test categories and their timeout requirements
  # Based on Section 4.1.1.5 performance criteria
  test_category_timeouts:
    unit_tests: 120             # 2 minutes for comprehensive unit test coverage
    integration_tests: 30       # 30 seconds per test scenario per section 4.1.1.5
    performance_benchmarks: 600 # 10 minutes for statistical benchmark validation
    
  # Environment setup and teardown timeout
  # Per TST-INF-003 environment reproducibility requirements
  environment_setup_timeout: 30  # seconds
  
  # Strict validation enforcement per Section 4.1.1.5
  # Ensures comprehensive error recovery and quality assurance integration
  strict_validation: true
  
  # TST-COV-004: Automated merge blocking on test failures
  # Enables CI/CD pipeline to block merges on quality gate violations
  block_merge_on_failure: true
  
  # CI/CD integration settings for GitHub Actions workflow
  # Aligned with TST-INF-004 CI pipeline execution requirements
  ci_integration:
    fail_fast: false            # Allow all tests to complete for comprehensive reporting
    parallel_execution: true    # Enable parallel test execution for performance
    artifact_retention: 30      # days to retain test artifacts and reports
    
  # Test isolation and cleanup requirements
  # Ensures clean test state between executions per Section 4.1.1.5
  isolation:
    cleanup_between_tests: true
    reset_fixtures: true
    clear_temp_files: true
    
  # Error recovery and escalation settings
  # Implements comprehensive error recovery mechanisms per Section 4.1.1.5
  error_handling:
    max_retries: 3              # Maximum retries for transient failures  
    retry_delay: 5              # seconds between retries
    escalation_threshold: 5     # Number of failures before escalation

# ============================================================================
# QUALITY GATE CATEGORIES AND VALIDATION RULES
# ============================================================================
# Comprehensive quality gate enforcement with specific validation rules
# and error handling per Section 4.1.1.5 requirements.

quality_gate_categories:
  # Coverage validation rules with module-specific requirements
  coverage_validation:
    enabled: true
    critical_modules:
      - "src/flyrigloader/api.py"          # 100% coverage required
      - "src/flyrigloader/config/"         # 100% coverage required  
      - "src/flyrigloader/discovery/"      # 100% coverage required
      - "src/flyrigloader/io/"             # 100% coverage required
    
    standard_modules:
      - "src/flyrigloader/utils/"          # 95% coverage required
      - "src/flyrigloader/__init__.py"     # 90% coverage required
    
    exclusion_patterns:
      - "*/test_*"              # Exclude test files from coverage analysis
      - "*/conftest.py"         # Exclude pytest configuration files
      - "*/__pycache__/*"       # Exclude Python cache directories
      
  # Performance validation rules with SLA enforcement
  performance_validation:
    enabled: true
    sla_enforcement: true
    benchmark_comparison: true
    regression_threshold: 0.1   # 10% performance regression tolerance
    
  # Test execution validation rules with comprehensive error handling
  execution_validation:
    enabled: true
    timeout_enforcement: true
    parallel_safety: true
    resource_monitoring: true

# ============================================================================
# INTEGRATION AND REPORTING CONFIGURATION
# ============================================================================
# CI/CD pipeline integration settings and comprehensive reporting configuration.

integration:
  # GitHub Actions workflow integration
  # Per TST-INF-004 CI pipeline execution requirements
  github_actions:
    workflow_file: ".github/workflows/test.yml"
    trigger_events:
      - "push"
      - "pull_request"
    
    # Python version matrix for comprehensive compatibility testing
    # Per TST-INF-003 environment reproducibility requirements
    python_versions:
      - "3.8"
      - "3.9" 
      - "3.10"
      - "3.11"
    
    # Operating system matrix for cross-platform validation
    operating_systems:
      - "ubuntu-latest"
      - "windows-latest"
      - "macos-latest"
  
  # Quality gate reporting configuration
  # Supports multiple output formats for different stakeholders
  reporting:
    formats:
      - "console"       # Real-time console output for developers
      - "json"          # Machine-readable for CI/CD integration
      - "html"          # Human-readable for quality assurance teams
      - "junit"         # Standard format for CI/CD systems
    
    # Report storage and artifact management
    artifacts:
      coverage_reports: "tests/coverage/reports/"
      benchmark_results: "tests/coverage/benchmarks/" 
      quality_gate_logs: "tests/coverage/logs/"
      retention_days: 30
    
    # Notification settings for quality gate violations
    notifications:
      on_failure: true
      on_regression: true
      channels:
        - "github_comments"     # Comment on pull requests
        - "ci_logs"            # Include in CI/CD logs

# ============================================================================
# METADATA AND VERSIONING
# ============================================================================
# Configuration metadata for tracking and validation purposes.

metadata:
  version: "1.0.0"
  created_date: "2024-01-15"
  specification_compliance:
    - "TST-COV-001"    # Overall coverage threshold >90%
    - "TST-COV-002"    # Critical module coverage 100%  
    - "TST-COV-004"    # Automated merge blocking
    - "TST-PERF-001"   # Data loading SLA 1s per 100MB
    - "TST-PERF-002"   # Transformation SLA 500ms per 1M rows
    - "TST-INF-002"    # Test execution timeout management
    - "Section 4.1.1.5" # Test execution workflow integration
  
  # Configuration validation schema version
  schema_version: "2.0"
  
  # Last updated tracking for configuration management
  last_updated: "2024-01-15"
  updated_by: "test-infrastructure-team"
  
  # Change log for configuration evolution tracking
  changelog:
    - version: "1.0.0"
      date: "2024-01-15"
      changes:
        - "Initial quality gate configuration implementation"
        - "TST-COV-001/002/004 coverage requirements implementation"
        - "TST-PERF-001/002 performance SLA validation"
        - "Section 4.1.1.5 test execution workflow integration"
        - "Comprehensive CI/CD pipeline integration settings"